library(boot)
boot(male_salary_data$Salary, n, sd)
boot(male_salary_data$Salary, sd)
boot(male_salary_data$Salary, sd, n)
n
boot(male_salary_data$Salary, sd, 100)
bootstrap(male_salary_data$Salary, sd, 100)
bootstrap(male_salary_data$Salary, 100, sd)
boot(male_salary_data$Salary, sd, 100)
cat(female_iqr_jack_mean, female_iqr_jack_se)
cat("female jackknife IQR: " female_iqr_jack_se)
cat("female jackknife IQR: " female_iqr_jack_se)
cat("female jackknife IQR:", female_iqr_jack_se)
cat("male jackknife IQR:", male_iqr_jack_se)
jackknife_df
boot(male_salary_data$Salary, sd, 100)
boot(male_salary_data$Salary, var, 100)
boot(male_salary_data$Salary, IQR, 100)
male_median_jack = jackknife(male_salary_data$Salary, IQR)
male_median_jack = jackknife(male_salary_data$Salary, IQR)
female_sd_jack = jackknife(female_salary_data$Salary, sd)
female_var_jack = jackknife(female_salary_data$Salary, var)
female_mean_jack = jackknife(female_salary_data$Salary, mean)
female_median_jack = jackknife(female_salary_data$Salary, median)
female_iqr_jack = jackknife(female_salary_data$Salary, IQR)
male_sd_jack = jackknife(male_salary_data$Salary, sd)
male_var_jack = jackknife(male_salary_data$Salary, var)
male_mean_jack = jackknife(male_salary_data$Salary, mean)
male_median_jack = jackknife(male_salary_data$Salary, median)
male_iqr_jack = jackknife(male_salary_data$Salary, IQR)
jackknife_df = data.frame(
female = rbind(
round(female_sd_jack$jack.se,2),
round(female_var_jack$jack.se,2),
round(female_mean_jack$jack.se,2),
round(female_median_jack$jack.se,2),
round(female_iqr_jack$jack.se,2),
round(female_sd_jack$jack.bias,2),
round(female_var_jack$jack.bias,2),
round(female_mean_jack$jack.bias,2),
round(female_median_jack$jack.bias,2),
round(female_iqr_jack$jack.bias,2)
),
male = rbind(
round(male_sd_jack$jack.se,2),
round(male_var_jack$jack.se,2),
round(male_mean_jack$jack.se,2),
round(male_median_jack$jack.se,2),
round(male_iqr_jack$jack.se,2),
round(male_sd_jack$jack.bias,2),
round(male_var_jack$jack.bias,2),
round(male_mean_jack$jack.bias,2),
round(male_median_jack$jack.bias,2),
round(male_iqr_jack$jack.bias,2)
)
)
rownames(jackknife_df) = c("sd se",
"var se",
"mean se",
"median se",
"IQR se",
"sd bias",
"var bias",
"mean bias",
"median bias",
"IQR bias")
jackknife_df
boot(male_salary_data$Salary, var, 100)
boot(male_salary_data$Salary, IQR, 100)
boot(female_salary_data$Salary, var, 100)
boot(female_salary_data$Salary, IQR, 100)
tinytex::install_tinytex()
library(MASS)
crabs
data(crabs, package="MASS")
data
# t-test
crabs
# t-test
crabs[crabs$sp == 'B']
# t-test
crabs[,crabs$sp == 'B']
# t-test
crabs[crabs$sp == 'B',]
ACrabs = crabs[crabs$sp == 'A',]
# t-test
BCrabs = crabs[crabs$sp == 'B',]
OCrabs = crabs[crabs$sp == 'O',]
OCrabs
t.test(BCrabs$CL, OCrabs$CL)
crabs[crabs$sp == 'B',]$CL
data.frame(Blue = BCrabs$CL,
Orange = OCrabs$CL)
chisq.test(data.frame(Blue = BCrabs$CL,
Orange = OCrabs$CL))
chisq = chisq.test(data.frame(Blue = BCrabs$CL,
Orange = OCrabs$CL))
chisq$observed
chisq$expected
chisq$expected,2
corrplot(chisq$residuals, is.cor = FALSE)
library(corrplot)
install.packages("corrplot")
install.packages("corrplot")
library(corrplot)
corrplot(chisq$residuals, is.cor = FALSE)
chisq = chisq.test(
(data.frame(Blue = BCrabs$CL,
Orange = OCrabs$CL)))
chisq
# chisq = chisq.test(
#   (data.frame(Blue = BCrabs$CL,
#              Orange = OCrabs$CL)))
table(Blue = BCrabs$CL,
Orange = OCrabs$CL)
# chisq = chisq.test(
#   (data.frame(Blue = BCrabs$CL,
#              Orange = OCrabs$CL)))
table(BCrabs$CL,
OCrabs$CL)
# chisq = chisq.test(
#   (data.frame(Blue = BCrabs$CL,
#              Orange = OCrabs$CL)))
chisq.test(table(BCrabs$CL,
OCrabs$CL))
# chisq = chisq.test(
#   (data.frame(Blue = BCrabs$CL,
#              Orange = OCrabs$CL)))
chisq.test(table(BCrabs$CL,
OCrabs$CL))
# chisq = chisq.test(
#   (data.frame(Blue = BCrabs$CL,
#              Orange = OCrabs$CL)))
tbl = table(BCrabs$CL,
OCrabs$CL)
chisq.test(tbl)
max(BCrabs$CL)
max(OCrabs$CL)
min(OCrabs$CL)
min(BCrabs$CL)
crabs
kruskal.test(CL ~ sp, data = crabs)
fisher.test(table(OCrabs$CL, BCrabs$CL))
permutation.test(OCrabs$CL, BCrabs$CL, 100)
install.packages("coin")
install.packages("coin")
install.packa
library(coin)
permutation.test(OCrabs$CL, BCrabs$CL, 100)
independence_test(OCrabs$CL, BCrabs$CL)
OCrabs$CL
independence_test(CL ~ SP)
independence_test(CL ~ SP, data = crabs)
crabs
independence_test(CL ~ sp, data = crabs)
ToothGrowth
t.test(len ~ supp, data = ToothGrowth)
t.test(len ~ supp, data = ToothGrowth)
ToothGrowth
library(dplyr)
install.packages("dplyr")
library(dplyr)
ToothGrowth
# changing to categorical data
ToothGrowth = ToothGrowth %>% mutate(
Group =
case_when(len > 20 ~ "HIGH",
len <= 20 ~ "LOW")
)
ToothGrowth
# quantitative t-test
t.test(len ~ supp, data = ToothGrowth)
table(len,supp, data=ToothGrowth)
table(ToothGrowth$len, ToothGrowth$supp)
table(ToothGrowth$Group, ToothGrowth$supp)
chisq.test(table(ToothGrowth$Group, ToothGrowth$supp))
tbl
tbl = table(ToothGrowth$Group, ToothGrowth$supp)
tbl
chisq.test(tbl)
library(MASS)
Boston
data = Boston
cwd()
setwd("~/Desktop/columbia/class/Applied_Data_Science/Fall2021-Project2-group5/lib")
list.files('../data/')
list.files(path='../data/')
list.files(path='../data')
list.files(path='/../data')
read.csv('../data/DHS_Data_Dashboard.csv')
setwd("~/Desktop/columbia/class/Applied_Data_Science/Fall2021-Project2-group5/lib")
read.csv('./data/DHS_Data_Dashboard.csv')
read.csv('./data/DHS_Data_Dashboard.csv')
read.csv('./data/DHS_Data_Dashboard.csv')
read.csv('./DHS_Data_Dashboard.csv')
read.csv('~data/DHS_Data_Dashboard.csv')
read.csv('~/data/DHS_Data_Dashboard.csv')
read.csv('~\data\DHS_Data_Dashboard.csv')
read.csv('../data/department_of_homeless_services/DHS_Data_Dashboard.csv')
read.csv('./data/department_of_homeless_services/DHS_Data_Dashboard.csv')
dhs_data_dashboard = read.csv('./data/department_of_homeless_services/DHS_Data_Dashboard.csv')
dhs_data_dashboard.head()
head(dhs_data_dashboard)
colnames(dhs_data_dashboard)
colnames(dhs_data_dashboard)
cleanCols <- function(x){
lower_names = tolower(names(x))
sub_periods = gsub("\\.", "_", lower_names)
sub_spaces = gsub(" ","_",sub_periods)
clean_df_cols = gsub("__","_",sub_spaces)
return(clean_df_cols)
}
names(dhs_data_dashboard) = cleanCols(dhs_data_dashboard)
colnames(dhs_data_dashboard)
gsub("fwc_avg_daily_census_individual_in_shelter__adults",)
gsub("fwc_avg_daily_census_individual_in_shelter__adults",'__','_')
dhs_data_dashboard
names(dhs_data_dashboard)
dhs_data_dashboard = read.csv('./data/department_of_homeless_services/DHS_Data_Dashboard.csv')
dhs_daily_report = read.csv('./data/department_of_homeless_services/DHS_Daily_Report.csv')
shelter_repair_scorecard = read.csv('./data/department_of_homeless_services/Shelter_Repair_Scorecard.csv')
buildings = read.csv('./data/department_of_homeless_services/Buildings_by_Borough_and_Community_District.csv')
individual_census = read.csv('./data/department_of_homeless_services/Individual_Census_by_Borough__Community_District__and_Facility_Type')
individual_census = read.csv('./data/department_of_homeless_services/Individual_Census_by_Borough__Community_District__and_Facility_Type.csv')
names(dhs_data_dashboard) = cleanCols(dhs_data_dashboard)
names(dhs_daily_report) = cleanCols(dhs_daily_report)
names(shelter_repair_scorecard) = cleanCols(shelter_repair_scorecard)
names(buildings) = cleanCols(buildings)
names(individual_census) = cleanCols(individual_census)
View(dhs_data_dashboard)
library(ggplot2)
names(dhs_data_dashboard)
ggplot(dhs_data_dashboard,
aes(x = report_date, y = fwc_avg_daily_census_individual_in_shelter__adults)) +
geom_line()
ggplot(dhs_data_dashboard,
aes(x = report_date,
y = fwc_avg_daily_census_individual_in_shelter__adults,
group = 1)) +
geom_line()
ggplot(dhs_data_dashboard,
aes(x = report_date,
y = fwc_avg_daily_census_individual_in_shelter__adults,
group = 1)) +
geom_line() +
theme(axis.text.x = element_text(angle = 90))
dates <- unique(sort(dhs_data_dashboard$report_date))
dhs_data_dashboard$report_date <- factor(dhs_data_dashboard$report_date, labels = dates,  ordered = T)
ggplot(dhs_data_dashboard,
aes(x = report_date,
y = fwc_avg_daily_census_individual_in_shelter__adults,
group = 1)) +
geom_line() +
theme(axis.text.x = element_text(angle = 90))
ggplot(dhs_data_dashboard,
aes(x = dates,
y = fwc_avg_daily_census_individual_in_shelter__adults,
group = 1)) +
geom_line() +
theme(axis.text.x = element_text(angle = 90))
dates
dhs_data_dashboard$report_date = as.Date(dhs_data_dashboard$report_date , format = "%m/%d/%Y")
ggplot(dhs_data_dashboard,
aes(x = dates,
y = fwc_avg_daily_census_individual_in_shelter__adults,
group = 1)) +
geom_line() +
theme(axis.text.x = element_text(angle = 90))
df[order(df$JoiningDate ),]
dhs_data_dashboard[order(dhs_data_dashboard$report_date ),]
ggplot(dhs_data_dashboard,
aes(x = report_date,
y = fwc_avg_daily_census_individual_in_shelter__adults,
group = 1)) +
geom_line() +
theme(axis.text.x = element_text(angle = 90))
ggplot(dhs_data_dashboard,
aes(x = dhs_data_dashboard[order(dhs_data_dashboard$report_date ),],
y = fwc_avg_daily_census_individual_in_shelter__adults,
group = 1)) +
geom_line() +
theme(axis.text.x = element_text(angle = 90))
ggplot(dhs_data_dashboard,
aes(x = order(dhs_data_dashboard$report_date ),
y = fwc_avg_daily_census_individual_in_shelter__adults,
group = 1)) +
geom_line() +
theme(axis.text.x = element_text(angle = 90))
ggplot(dhs_data_dashboard,
aes(x = order(dhs_data_dashboard$report_date),
y = fwc_avg_daily_census_individual_in_shelter__adults,
group = 1)) +
geom_line() +
theme(axis.text.x = element_text(angle = 90))
order(dhs_data_dashboard$report_date)
dhs_data_dashboard$report_date
dhs_data_dashboard[order(dhs_data_dashboard$report_date ),]
ggplot(dhs_data_dashboard[order(dhs_data_dashboard$report_date ),],
aes(x = report_date,
y = fwc_avg_daily_census_individual_in_shelter__adults,
group = 1)) +
geom_line() +
theme(axis.text.x = element_text(angle = 90))
dhs_data_dashboard[order(dhs_data_dashboard$report_date ),]
ggplot(dhs_data_dashboard[order(dhs_data_dashboard$report_date ),],
aes(x = dhs_data_dashboard[order(dhs_data_dashboard$report_date ),]$report_date,
y = dhs_data_dashboard[order(dhs_data_dashboard$report_date ),]$fwc_avg_daily_census_individual_in_shelter__adults,
group = 1)) +
geom_line() +
theme(axis.text.x = element_text(angle = 90))
dhs_data_dashboard$report_date = as.Date(dhs_data_dashboard$report_date,
format = "%Y/%m/%d")
dhs_data_dashboard = read.csv('./data/department_of_homeless_services/DHS_Data_Dashboard.csv')
names(dhs_data_dashboard) = cleanCols(dhs_data_dashboard)
dhs_data_dashboard$date = as.Date(dhs_data_dashboard$report_date,
format = "%Y/%m/%d")
dhs_data_dashboard$date = as.Date(dhs_data_dashboard$report_date,
format = "%m/%d/%Y")
dhs_data_dashboard[c('date','report_date'),]
dhs_data_dashboard[,c('date','report_date')]
str(dhs_data_dashboard)
ggplot(dhs_data_dashboard,
aes(x = date,
y = fwc_avg_daily_census_individual_in_shelter__adults,
group = 1)) +
geom_line() +
theme(axis.text.x = element_text(angle = 90))
df = dhs_data_dashboard[,c('date','report_date','fwc_avg_daily_census_individual_in_shelter__adults')]
df
View(df)
df$newdate = format(df$date, "%Y-%m-%d")
ggplot(dhs_data_dashboard,
aes(x = newdate,
y = fwc_avg_daily_census_individual_in_shelter__adults,
group = 1)) +
geom_line() +
theme(axis.text.x = element_text(angle = 90))
ggplot(df,
aes(x = newdate,
y = fwc_avg_daily_census_individual_in_shelter__adults,
group = 1)) +
geom_line() +
theme(axis.text.x = element_text(angle = 90))
names(dhs_data_dashboard)
ggplot(dhs_data_dashboard,
aes(x = newdate,
y = sa_avg_daily_census_individual_in_shelter__total,
group = 1)) +
geom_line() +
theme(axis.text.x = element_text(angle = 90))
dhs_data_dashboard$date = as.Date(dhs_data_dashboard$report_date,
format = "%m/%d/%Y")
dhs_data_dashboard$newdate = format(dhs_data_dashboard$date, "%Y-%m-%d")
ggplot(dhs_data_dashboard,
aes(x = newdate,
y = sa_avg_daily_census_individual_in_shelter__total,
group = 1)) +
geom_line() +
theme(axis.text.x = element_text(angle = 90))
ggplot(dhs_data_dashboard,
aes(x = newdate,
y = sa_avg_daily_census_individual_in_shelter__total,
group = 1)) +
geom_line() +
geom_vline(xintercept = as.Date("2020/03/01",
format = "%Y/%m/%d"),
linetype="dotted",
color = "red",
size=1) +
theme(axis.text.x = element_text(angle = 90))
ggplot(dhs_data_dashboard,
aes(x = newdate,
y = sa_avg_daily_census_individual_in_shelter__total,
group = 1)) +
geom_line() +
geom_vline(xintercept = "2020/03/01",
linetype="dotted",
color = "red",
size=1) +
theme(axis.text.x = element_text(angle = 90))
dhs_data_dashboard[111]
dhs_data_dashboard$report_date[111]
dhs_data_dashboard$report_date[11]
dhs_data_dashboard$report_date
dhs_data_dashboard$report_date == "03/01/2020"
which(dhs_data_dashboard$report_date == "03/01/2020")
ggplot(dhs_data_dashboard,
aes(x = newdate,
y = sa_avg_daily_census_individual_in_shelter__total,
group = 1)) +
geom_line() +
geom_vline(as.numeric(which(dhs_data_dashboard$report_date == "03/01/2020")),
linetype="dotted",
color = "red",
size=1) +
theme(axis.text.x = element_text(angle = 90))
ggplot(dhs_data_dashboard,
aes(x = newdate,
y = sa_avg_daily_census_individual_in_shelter__total,
group = 1)) +
geom_line() +
geom_vline(as.numeric(dhs_data_dashboard$newdate[which(dhs_data_dashboard$report_date == "03/01/2020")]),
linetype="dotted",
color = "red",
size=1) +
theme(axis.text.x = element_text(angle = 90))
ggplot(dhs_data_dashboard,
aes(x = newdate,
y = sa_avg_daily_census_individual_in_shelter__total,
group = 1)) +
geom_line() +
geom_vline(as.numeric(
dhs_data_dashboard$newdate[(which(dhs_data_dashboard$report_date == "03/01/2020"))]
),
linetype="dotted",
color = "red",
size=1) +
theme(axis.text.x = element_text(angle = 90))
ggplot(dhs_data_dashboard,
aes(x = newdate,
y = sa_avg_daily_census_individual_in_shelter__total,
group = 1)) +
geom_line() +
geom_vline(as.numeric(dhs_data_dashboard$newdate[57]
# dhs_data_dashboard$newdate[(which(dhs_data_dashboard$report_date == "03/01/2020"))]
),
linetype="dotted",
color = "red",
size=1) +
theme(axis.text.x = element_text(angle = 90))
ggplot(dhs_data_dashboard,
aes(x = newdate,
y = sa_avg_daily_census_individual_in_shelter__total,
group = 1)) +
geom_line() +
geom_vline(as.numeric(newdate[57]
# dhs_data_dashboard$newdate[(which(dhs_data_dashboard$report_date == "03/01/2020"))]
),
linetype="dotted",
color = "red",
size=1) +
theme(axis.text.x = element_text(angle = 90))
dhs_data_dashboard$
ggplot(dhs_data_dashboard,
aes(x = newdate,
y = sa_avg_daily_census_individual_in_shelter__total,
group = 1)) +
geom_line() +
geom_vline(as.numeric(dhs_data_dashboard$newdate[57]
# dhs_data_dashboard$newdate[(which(dhs_data_dashboard$report_date == "03/01/2020"))]
),
linetype="dotted",
color = "red",
size=1) +
theme(axis.text.x = element_text(angle = 90))
ggplot(dhs_data_dashboard,
aes(x = newdate,
y = sa_avg_daily_census_individual_in_shelter__total,
group = 1)) +
geom_line() +
geom_vline(as.numeric(dhs_data_dashboard$newdate[57]
# dhs_data_dashboard$newdate[(which(dhs_data_dashboard$report_date == "03/01/2020"))]
),
linetype="dotted",
color = "red",
size=1) +
theme(axis.text.x = element_text(angle = 90))
ggplot(dhs_data_dashboard,
aes(x = newdate,
y = sa_avg_daily_census_individual_in_shelter__total,
group = 1)) +
geom_line() +
geom_vline(as.numeric(dhs_data_dashboard$newdate[57]),
linetype="dotted",
color = "red",
size=1) +
theme(axis.text.x = element_text(angle = 90))
ggplot(dhs_data_dashboard,
aes(x = newdate,
y = sa_avg_daily_census_individual_in_shelter__total,
group = 1)) +
geom_line() +
geom_vline(xintercept = as.numeric(dhs_data_dashboard$newdate[57]),
linetype="dotted",
color = "red",
size=1) +
theme(axis.text.x = element_text(angle = 90))
ggplot(dhs_data_dashboard,
aes(x = newdate,
y = sa_avg_daily_census_individual_in_shelter__total,
group = 1)) +
geom_line() +
geom_vline(xintercept = dhs_data_dashboard$newdate[57],
linetype="dotted",
color = "red",
size=1) +
theme(axis.text.x = element_text(angle = 90))
ggplot(dhs_data_dashboard,
aes(x = newdate,
y = sa_avg_daily_census_individual_in_shelter__total,
group = 1)) +
geom_line() +
geom_vline(xintercept = dhs_data_dashboard$newdate[57],
linetype="dotted",
color = "red",
size=.75) +
theme(axis.text.x = element_text(angle = 90))
View(shelter_repair_scorecard)
View(df)
View(dhs_daily_report)
View(individual_census)
View(buildings)
