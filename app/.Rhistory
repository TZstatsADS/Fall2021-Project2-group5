table1<-as.data.frame(rowname=c('Performance when p >> n',"Performance under multicollinearity","Unbiased estimation","Model selection","Simplicity: Computation, Inference, Interpretation"),
OLS=c(3,3,1,2,1),
Ridge=c(2,2,3,3,2),
lasso=c(2,2,3,1,1),
`Elastic Net`=c(1,1,3,2,3))
table1<-as.data.frame(rowname=c('Performance when p >> n', "Performance under multicollinearity", "Unbiased estimation","Model selection","Simplicity: Computation, Inference, Interpretation"),
OLS=c(3,3,1,2,1),
Ridge=c(2,2,3,3,2),
lasso=c(2,2,3,1,1),
`Elastic Net`=c(1,1,3,2,3))
table1<-as.data.frame(rowname=c("Performance when p >> n", "Performance under multicollinearity", "Unbiased estimation","Model selection","Simplicity: Computation, Inference, Interpretation"),
OLS=c(3,3,1,2,1),
Ridge=c(2,2,3,3,2),
lasso=c(2,2,3,1,1),
`Elastic Net`=c(1,1,3,2,3))
table1<-data.frame(rowname=c("Performance when p >> n", "Performance under multicollinearity", "Unbiased estimation","Model selection","Simplicity: Computation, Inference, Interpretation"),
OLS=c(3,3,1,2,1),
Ridge=c(2,2,3,3,2),
lasso=c(2,2,3,1,1),
`Elastic Net`=c(1,1,3,2,3))
table1<-data.frame(rowname=c("Performance when p >> n", "Performance under multicollinearity", "Unbiased estimation","Model selection","Simplicity: Computation, Inference, Interpretation"),
OLS=c(3,3,1,2,1),
Ridge=c(2,2,3,3,2),
lasso=c(2,2,3,1,1),
`Elastic Net`=c(1,1,3,2,3))
table1
table1<-data.frame(rowname=c("Performance when p >> n", "Performance under multicollinearity", "Unbiased estimation","Model selection","Simplicity: Computation, '\n'Inference, Interpretation"),
OLS=c(3,3,1,2,1),
Ridge=c(2,2,3,3,2),
lasso=c(2,2,3,1,1),
`Elastic Net`=c(1,1,3,2,3))
table1
table1<-data.frame(rowname=c("Performance when p >> n", "Performance under multicollinearity", "Unbiased estimation","Model selection","Simplicity: Computation, \nInference, Interpretation"),
OLS=c(3,3,1,2,1),
Ridge=c(2,2,3,3,2),
lasso=c(2,2,3,1,1),
`Elastic Net`=c(1,1,3,2,3))
table1
table1<-data.frame(rowname=c("Performance when p >> n", "Performance under multicollinearity", "Unbiased estimation","Model selection","Simplicity: Computation, \n'Inference, Interpretation"),
OLS=c(3,3,1,2,1),
Ridge=c(2,2,3,3,2),
lasso=c(2,2,3,1,1),
`Elastic Net`=c(1,1,3,2,3))
table1
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(MASS)
head(Boston)
#LASSO
library(glmnet)
set.seed(1)
lambdas <- 10^seq(2, -3, by = -.1)
X <-as.matrix(Boston[ ,c('crim','zn','indus','nox','rm','age','tax')])
y_train <- Boston$medv
# Setting alpha = 1 implements lasso regression
lasso_reg <- cv.glmnet(X, y_train, alpha = 1, lambda = lambdas, standardize = TRUE, nfolds = 10)
# Best
lambda_best <- lasso_reg$lambda.min
lambda_best
bos.lasso <- glmnet(X,y_train,alpha=1, lambda = lambda_best)
bos.lasso$beta
bos.lasso$dev.ratio
#regression coef
blasso<-glmnet(df1,df$medv,alpha = 1,lambda = best_lambda)
blasso
#lasso
library(glmnet)
set.seed(1)
cvlasso<-cv.glmnet(df1,df$medv,alpha = 1)
plot(cvlasso)
#bestlambda
best_lambda<-cvlasso$lambda.min
best_lambda
#regression coef
blasso<-glmnet(df1,df$medv,alpha = 1,lambda = best_lambda)
coeff<-coef(blasso,s="lambda.min")
coeff
predict_lasso<-predict(cvlasso,newx = df1,s="lambda.min")
RMSE_lasso<-sqrt(mean((df$medv-predict_lasso)^2))
RMSE_lasso
blasso$beta
#bestlambda
best_lambda<-cvlasso$lambda.min
best_lambda
#regression coef
blasso<-glmnet(df1,df$medv,alpha = 1,lambda = best_lambda)
coef(blasso)
predict_lasso<-predict(blasso,newx = df1,s="lambda.min")
RMSE_lasso<-sqrt(mean((df$medv-predict_lasso)^2))
RMSE_lasso
# calculate RMSE for both procedures
RMSE_for<-sqrt(mean((df$medv-step_forward$fitted.values)^2))
RMSE_for
RMSE_back<-sqrt(mean((df$medv-step_backward$fitted.values)^2))
RMSE_back
rmse_ols=sqrt(mean((df$medv-fit$fitted.values)^2))
rmse_ols
pcr_fit$ncomp
#Principle Component Regression
library(pls)
pcr.boston <- pcr(medv~crim+zn+indus+nox+rm+age+tax,data=Boston,scale = TRUE, validation = "CV")
summary(pcr.boston)
validationplot(pcr.boston)
validationplot(pcr.boston, val.type="MSEP")
validationplot(pcr.boston, val.type="R2")
#stepwise
# stepwise forward regression
fit_forward <- lm(medv ~ 1, data = df)
step_forward <- stepAIC(fit_forward, direction = "forward",scope=list(
upper = fit,lower = fit_forward),trace = F)
step_forward
library(pls)
pcr_fit<-pcr(medv~crim+zn+indus+nox+rm+age+tax,data=df)
summary(pcr_fit)
pcr_fit$ncomp
rmse_pcr=sqrt(mean((df$medv-pcr_fit$fitted.values)^2))
rmse_pcr
library(pls)
pcr_fit<-pcr(medv~crim+zn+indus+nox+rm+age+tax,data=df)
summary(pcr_fit)
pcr_fit
validationplot(pcr_fit)
validationplot(pcr_fit, val.type="R2")
rmse_pcr=sqrt(mean((df$medv-pcr_fit$fitted.values)^2))
rmse_pcr
library(pls)
pcr_fit<-pcr(medv~crim+zn+indus+nox+rm+age+tax,data=df)
summary(pcr_fit)
pcr_fit
validationplot(pcr_fit)
validationplot(pcr_fit, val.type="R2")
pcrfit=predict(pcr_fit,ncomp = 6,newx=df1)
rmse_pcr=sqrt(mean((df$medv-pcrfit)^2))
rmse_pcr
library(pls)
pcr_fit<-pcr(medv~crim+zn+indus+nox+rm+age+tax,data=df)
summary(pcr_fit)
validationplot(pcr_fit)
validationplot(pcr_fit, val.type="R2")
pcrfit=predict(pcr_fit,ncomp = 6,newx=df1)
rmse_pcr=sqrt(mean((df$medv-pcrfit)^2))
rmse_pcr
library(pls)
pcr_fit<-pcr(medv~crim+zn+indus+nox+rm+age+tax,data=df)
summary(pcr_fit)
validationplot(pcr_fit)
validationplot(pcr_fit, val.type="R2")
pcrfit=predict(pcr_fit,ncomp = 6,newx=df1)
rmse_pcr=sqrt(mean((df$medv-pcrfit)^2))
rmse_pcr
#bestlambda
best_lambda<-cvlasso$lambda.min
best_lambda
#regression coef
blasso<-glmnet(df1,df$medv,alpha = 1,lambda = best_lambda)
coef(blasso)
predict_lasso<-predict(blasso,newx = df1,s="lambda.min")
RMSE_lasso<-sqrt(mean((df$medv-predict_lasso)^2))
RMSE_lasso
#bestlambda
best_lambda<-cvlasso$lambda.min
best_lambda
#regression coef
blasso<-glmnet(df1,df$medv,alpha = 1,lambda = best_lambda)
coef(blasso)
predict_lasso<-predict(blasso,newx = df1,s="lambda.min")
RMSE_lasso<-sqrt(mean((df$medv-predict_lasso)^2))
RMSE_lasso
table1<-data.frame(rowname=c("Performance when p >> n", "Performance under multicollinearity", "Unbiased estimation","Model selection","Simplicity: Computation, Inference, Interpretation"),
OLS=c(3,3,1,2,1),
Ridge=c(2,1,3,3,2),
lasso=c(1,2,3,1,1),
`Elastic Net`=c(1,1,3,2,3))
table1
shiny::runApp('D:/wyr/GR5243/Fall2021-Project2-group5/app')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
df<-data("ChickWeight")
df
df<-ChickWeight
View(df)
library(tidyverse)
df<-ChickWeight
head(df)
library(tidyverse)
df0<-ChickWeight
head(df0)
df<-df0%>%filter(Time==18)
a<-anova(data=df,Weight~Diet)
a<-aov(data=df,Weight~Diet)
a<-aov(data=df,weight~Diet)
summary(a)
knitr::opts_chunk$set(echo = TRUE)
t1<-read.csv("../2021VAERSDATA.csv")
t1<-read.csv("../data/2021VAERSDATA.csv")
t1<-read.csv("./data/2021VAERSDATA.csv")
t2<-read.csv("./data/2021VAERSVAX.csv")
View(t2)
#load original datasets
library(tidyverse)
t1<-read.csv("./data/2021VAERSDATA.csv")
t2<-read.csv("./data/2021VAERSVAX.csv")
t2<-read.csv("./data/2021VAERSVAX.csv")
t1<-read_csv("./data/2021VAERSDATA.csv")
t2<-read_csv("./data/2021VAERSVAX.csv")
t3<-read_csv("./data/2021VAERSSYMPTOMS.csv")
View(t2)
View(t2)
t2<-t2%>%filter(VAX_TYPE=='COVID19'&(VAX_MANU=='MODERNA'|VAX_MANU=='PFIZER\BIONTECH'))%>%
t2<-t2%>%filter(VAX_TYPE=='COVID19'&(VAX_MANU=='MODERNA'|VAX_MANU=="PFIZER\BIONTECH"))%>%
t2<-t2%>%filter(VAX_TYPE=='COVID19'&(VAX_MANU=='MODERNA'|VAX_MANU=="PFIZER\\BIONTECH"))%>%
dplyr::select(VAERS_ID,VAX_MANU,VAX_DOSE_SERIES)
View(t2)
View(t1)
#clean data
t1<-t1%>%dplyr::select(-STATE,-RECVDATE,-RPT_DATE,-LAB_DATA,-(V_ADMINBY:t1$OTHER_MEDS),-SPLTTYPE,-TODAYS_DATE,-OFC_VISIT,-ER_ED_VISIT)
#clean data
t1<-t1%>%dplyr::select(-STATE,-RECVDATE,-RPT_DATE,-LAB_DATA,-(V_ADMINBY:t1$OTHER_MEDS),-SPLTTYPE,-TODAYS_DATE,-OFC_VISIT,-ER_ED_VISIT)
#clean data
t1<-t1%>%dplyr::select(-RECVDATE,-STATE,-RPT_DATE,-LAB_DATA,-(V_ADMINBY:t1$OTHER_MEDS),-SPLTTYPE,-TODAYS_DATE,-OFC_VISIT,-ER_ED_VISIT)
rlang::last_error()
#clean data
t1<-t1%>%dplyr::select(-RECVDATE,-STATE,-RPT_DATE,-LAB_DATA,-(V_ADMINBY:OTHER_MEDS),-SPLTTYPE,-TODAYS_DATE,-OFC_VISIT,-ER_ED_VISIT)
View(t1)
#clean data
t1<-t1%>%dplyr::select(-RECVDATE,-STATE,-RPT_DATE,CAGE_MO,-LAB_DATA,-(V_ADMINBY:OTHER_MEDS),-SPLTTYPE,-TODAYS_DATE,-OFC_VISIT,-ER_ED_VISIT)
#load original datasets
library(tidyverse)
t1<-read_csv("./data/2021VAERSDATA.csv")
t2<-read_csv("./data/2021VAERSVAX.csv")
t3<-read_csv("./data/2021VAERSSYMPTOMS.csv")
#clean data
t1<-t1%>%dplyr::select(-RECVDATE,-STATE,-RPT_DATE,CAGE_MO,-LAB_DATA,-(V_ADMINBY:OTHER_MEDS),-SPLTTYPE,-TODAYS_DATE,-OFC_VISIT,-ER_ED_VISIT)
t2<-t2%>%filter(VAX_TYPE=='COVID19'&(VAX_MANU=='MODERNA'|VAX_MANU=="PFIZER\\BIONTECH"))%>%
dplyr::select(VAERS_ID,VAX_MANU,VAX_DOSE_SERIES)
#combine data
df<-t1%>%inner_join(t2,by='VAERS_ID')%>%inner_join(t3,by='VAERS_ID')
head(df)
View(t3)
t3<-t3%>%dplyr::select(VAERS_ID,SYMPTOM1,SYMPTOM2,SYMPTOM3,SYMPTOM4,SYMPTOM5)
#combine data
df<-t1%>%inner_join(t2,by='VAERS_ID')%>%inner_join(t3,by='VAERS_ID')
head(df)
View(df)
t2<-t2%>%filter(VAX_TYPE=='COVID19'&(VAX_MANU=='MODERNA'|VAX_MANU=="PFIZER\\BIONTECH"))%>%
dplyr::select(VAERS_ID,VAX_MANU,VAX_DOSE_SERIES)%>%drop_na()
t2<-read_csv("./data/2021VAERSVAX.csv")
t2<-t2%>%filter(VAX_TYPE=='COVID19'&(VAX_MANU=='MODERNA'|VAX_MANU=="PFIZER\\BIONTECH"))%>%
dplyr::select(VAERS_ID,VAX_MANU,VAX_DOSE_SERIES)%>%drop_na()
#clean data
t1<-t1%>%dplyr::select(-RECVDATE,-STATE,-RPT_DATE,CAGE_MO,-LAB_DATA,-(V_ADMINBY:OTHER_MEDS),-SPLTTYPE,-TODAYS_DATE,-OFC_VISIT,-ER_ED_VISIT, -(SYMPTOM_TEXT:CUR_ILL))
t1<-read_csv("./data/2021VAERSDATA.csv")
View(t1)
#clean data
t1<-t1%>%dplyr::select(VAERS_ID,AGE_YRS,CAGE_YR,SEX)
#combine data
df<-t1%>%inner_join(t2,by='VAERS_ID')%>%inner_join(t3,by='VAERS_ID')%>%
group_by(VAX_MANU)
head(df)
#combine data
df<-t1%>%inner_join(t2,by='VAERS_ID')%>%inner_join(t3,by='VAERS_ID')%>%
group_by(VAERS_ID,VAX_MANU)
head(df)
t3<-t3%>%unite('SYMPTOM',SYMPTOM1,SYMPTOM2,SYMPTOM3,SYMPTOM4,SYMPTOM5,sep = '|')
View(t3)
#combine data
df<-t1%>%inner_join(t2,by='VAERS_ID')%>%inner_join(t3,by='VAERS_ID')%>%
group_by(VAX_MANU,VAERS_ID)
head(df)
#find the most frequent symptoms of each group
df1<-df%>%separate_rows(SYMPTOM,sep='[|]')%>%
select(SYMPTOM)
#visualize second source
df1%>%ggplot(aes(SYMPTOM))+geom_bar()+
labs(title='Distribution of each SYMPTOMs',x='SYMPTOM')+
theme(plot.title = element_text(hjust =0.5))+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
#find the most frequent symptoms of each group
df1<-df%>%separate_rows(SYMPTOM,sep='[|]')%>%
select(VAX_MANU, VAERS_ID,SYMPTOM)%>%count()
View(df1)
#find the most frequent symptoms of each group
df1<-df%>%separate_rows(SYMPTOM,sep='[|]')%>%
select(VAX_MANU, VAERS_ID,SYMPTOM)%>%ungroup()%>%
filter(SYMPTOM!='NA')%>%
group_by(VAX_MANU,SYMPTOM)%>%count()
#find the most frequent symptoms of each group
df1<-df%>%separate_rows(SYMPTOM,sep='[|]')%>%
select(VAX_MANU, VAERS_ID,SYMPTOM)%>%ungroup()%>%
filter(SYMPTOM!='NA')%>%
group_by(VAX_MANU,SYMPTOM)%>%count()%>%arrange(desc(n))
#combine data
df<-t1%>%inner_join(t2,by='VAERS_ID')%>%inner_join(t3,by='VAERS_ID')
pfizer<-df%>%filter(VAX_MANU=='PFIZER\\BIONTECH')
moderna<-df%>%filter(VAX_MANU=='MODERNA')
most_freq_symp<-function(df){
df1<-df%>%ungroup()%>%select(SYMPTOM)%>%
separate_rows(SYMPTOM,sep='[|]')%>%filter(SYMPTOM!='NA')%>%
group_by(SYMPTOM)%>%count()%>%arrange(desc(n))
return(df1)
}
symp_pfi<-most_freq_symp(pfizer)
symp_mod<-most_freq_symp(moderna)
View(symp_mod)
View(symp_pfi)
View(df)
pfizer<-df%>%filter(VAX_MANU=='PFIZER\\BIONTECH')%>%group_by(VAX_DOSE_SERIES)
moderna<-df%>%filter(VAX_MANU=='MODERNA')%>%group_by(VAX_DOSE_SERIES)
View(pfizer)
most_freq_symp<-function(df){
df1<-df%>%ungroup()%>%select(VAX_DOSE_SERIES,SYMPTOM)%>%
separate_rows(SYMPTOM,sep='[|]')%>%filter(SYMPTOM!='NA')%>%
group_by(SYMPTOM)%>%count()%>%arrange(desc(n))
return(df1)
}
symp_pfi<-most_freq_symp(pfizer)
symp_mod<-most_freq_symp(moderna)
most_freq_symp<-function(df){
df1<-df%>%ungroup()%>%select(VAX_DOSE_SERIES,SYMPTOM)%>%
separate_rows(SYMPTOM,sep='[|]')%>%filter(SYMPTOM!='NA')%>%
group_by(VAX_DOSE_SERIES,SYMPTOM)%>%count()%>%arrange(desc(n))
return(df1)
}
symp_pfi<-most_freq_symp(pfizer)
View(moderna)
View(pfizer)
unique(pfizer$VAERS_ID)
unique(moderna$VAERS_ID)
count(unique(pfizer$VAERS_ID))
#total number of adverse events of each manufacturer
which(unique(pfizer$VAERS_ID))
length(unique(pfizer$VAERS_ID))
length(unique(moderna$VAERS_ID))
t01<-read_csv("./data/2020VAERSDATA.csv")
t02<-read_csv("./data/2020VAERSVAX.csv")
t03<-read_csv("./data/2020VAERSSYMPTOMS.csv")
#load original datasets
library(tidyverse)
t01<-read_csv("./data/2020VAERSDATA.csv")
t02<-read_csv("./data/2020VAERSVAX.csv")
t02<-read_csv("./data/2020VAERSVAX.csv")
t03<-read_csv("./data/2020VAERSSYMPTOMS.csv")
t11<-read_csv("./data/2021VAERSDATA.csv")
t12<-read_csv("./data/2021VAERSVAX.csv")
t13<-read_csv("./data/2021VAERSSYMPTOMS.csv")
#clean data
t1<-rbind(t01,t1)%>%dplyr::select(VAERS_ID,AGE_YRS,CAGE_YR,SEX)
#clean data
t1<-rbind(t01,t11)%>%dplyr::select(VAERS_ID,AGE_YRS,CAGE_YR,SEX)
View(t1)
#clean data
t1<-rbind(t01,t11)%>%dplyr::select(VAERS_ID,AGE_YRS,CAGE_YR,SEX)
#-RECVDATE,-STATE,-RPT_DATE,CAGE_MO,-LAB_DATA,-(V_ADMINBY:OTHER_MEDS),-SPLTTYPE,-TODAYS_DATE,-OFC_VISIT,-ER_ED_VISIT
t2<-rbind(t02,t12)%>%filter(VAX_TYPE=='COVID19'&(VAX_MANU=='MODERNA'|VAX_MANU=="PFIZER\\BIONTECH"))%>%
dplyr::select(VAERS_ID,VAX_MANU,VAX_DOSE_SERIES)%>%drop_na()
t3<-rbind(t03,t13)%>%unite('SYMPTOM',SYMPTOM1,SYMPTOM2,SYMPTOM3,SYMPTOM4,SYMPTOM5,sep = '|')%>%dplyr::select(VAERS_ID,SYMPTOM)
#dplyr::select(VAERS_ID,SYMPTOM1,SYMPTOM2,SYMPTOM3,SYMPTOM4,SYMPTOM5)
#combine data and divide into two subsets based on vaccine manufacturer
df<-t1%>%inner_join(t2,by='VAERS_ID')%>%inner_join(t3,by='VAERS_ID')
pfizer<-df%>%filter(VAX_MANU=='PFIZER\\BIONTECH')%>%group_by(VAX_DOSE_SERIES)
moderna<-df%>%filter(VAX_MANU=='MODERNA')%>%group_by(VAX_DOSE_SERIES)
#total number of adverse events of each manufacturer
length(unique(pfizer$VAERS_ID))
length(unique(moderna$VAERS_ID))
#find the most frequent symptoms of each group
most_freq_symp<-function(df){
df1<-df%>%ungroup()%>%select(VAX_DOSE_SERIES,SYMPTOM)%>%
separate_rows(SYMPTOM,sep='[|]')%>%filter(SYMPTOM!='NA')%>%
group_by(VAX_DOSE_SERIES,SYMPTOM)%>%count()%>%arrange(desc(n))
return(df1)
}
symp_pfi<-most_freq_symp(pfizer)
symp_mod<-most_freq_symp(moderna)
#visualize second source
df1%>%ggplot(aes(SYMPTOM))+geom_bar()+
labs(title='Distribution of each SYMPTOMs',x='SYMPTOM')+
theme(plot.title = element_text(hjust =0.5))+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
View(t1)
View(t11)
View(symp_mod)
View(symp_pfi)
#load data of total number vaccine
total<-read_csv("./data/COVID-19_Vaccinations.csv")
View(total)
temp<-total%>%filter(Date=='09/24/2021')%>%select(Distributed_Moderna,Distributed_Pfizer)%>%summarise(mod=sum(Distributed_Moderna),pfi=sum(Distributed_Pfizer))
View(temp)
temp<-total%>%filter(Date=='09/24/2021')%>%select(Distributed_Moderna,Distributed_Pfizer,Series_Complete_Moderna,Series_Complete_Pfizer)%>%summarise(mod=sum(Distributed_Moderna),pfi=sum(Distributed_Pfizer),mod_comp=sum(Series_Complete_Moderna),pfi_comp=sum(Series_Complete_Pfizer))
df%>%ggplot(aes(SYMPTOM))+geom_bar()+
labs(title='Distribution of each SYMPTOMs',x='SYMPTOM')+
theme(plot.title = element_text(hjust =0.5))+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
return(p)
p<-data%>%ggplot(aes(SYMPTOM))+geom_bar()+
labs(title='Distribution of each SYMPTOMs',x='SYMPTOM')+
theme(plot.title = element_text(hjust =0.5))+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
#visualize
freq<-function(data){
p<-data%>%ggplot(aes(SYMPTOM))+geom_bar()+
labs(title='Distribution of each SYMPTOMs',x='SYMPTOM')+
theme(plot.title = element_text(hjust =0.5))+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
return(p)
}
setwd('D:\\wyr\\GR5243\\Fall2021-Project2-group5\\app')
library(shiny)
runApp()
runApp()
setwd('D:\\wyr\\GR5243\\Spring2021-Project2-group4\\app')
runApp()
setwd('D:\\wyr\\GR5243\\Spring2021-Project2-group4\\app')
runApp()
setwd('D:\\wyr\\GR5243\\Spring2021-Project2-group8\\app')
runApp()
setwd('D:\\wyr\\GR5243\\Spring2021-Project2-group5\\app')
runApp()
setwd('D:\\wyr\\GR5243\\Fall2021-Project2-group5\\app')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
covid <- read.csv("https://data.cityofnewyork.us/resource/rc75-m7u3.csv", stringsAsFactors = FALSE)
covid <- covid %>% rename_all(funs(str_replace_all(., "_7day_avg", "(7day_avg)")))%>%
str_sub(date_of_interest,1,10)
View(covid)
covid$date_of_interest[1]
class(covid$date_of_interest[1])
str_sub(covid$date_of_interest[1],1,10)
covid <- covid %>% str_sub(date_of_interest,1,10)%>%
rename_all(funs(str_replace_all(., "_7day_avg", "(7day_avg)")))
covid <- covid %>% str_sub(date_of_interest,10)%>%
rename_all(funs(str_replace_all(., "_7day_avg", "(7day_avg)")))
covid <- covid %>% str_sub(date_of_interest,10)%>%
rename_all(funs(str_replace_all(., "_7day_avg", "(7day_avg)")))
covid$date_of_interest<-str_sub(covid$date_of_interest,10)
covid <- covid %>%rename_all(funs(str_replace_all(., "_7day_avg", "(7day_avg)")))
View(covid)
covid <- read.csv("https://data.cityofnewyork.us/resource/rc75-m7u3.csv", stringsAsFactors = FALSE)
covid$date_of_interest<-substr(covid$date_of_interest,1,10)
covid <- covid %>%rename_all(funs(str_replace_all(., "_7day_avg", "(7day_avg)")))
View(covid)
runApp()
runApp()
runApp()
runApp()
runApp()
covid$date_of_interest <-
as.Date(covid$date_of_interest,format="%Y/%m/%d")
View(covid)
library(lubridate)
covid$date_of_interest <-
+     as.Date(covid$date_of_interest,format="%Y/%m/%d")
covid$date_of_interest <-
as.Date(covid$date_of_interest,format="%Y/%m/%d")
View(covid)
covid$date_of_interest <-
ymd(covid$date_of_interest)
View(covid)
covid <- read.csv("https://data.cityofnewyork.us/resource/rc75-m7u3.csv", stringsAsFactors = FALSE)
covid$date_of_interest<-substr(covid$date_of_interest,1,10)
covid <- covid %>%rename_all(funs(str_replace_all(., "_7day_avg", "(7day_avg)")))
class(covid$date_of_interest)
covid$date_of_interest <-
ymd(covid$date_of_interest)
View(covid)
class(covid$date_of_interest)
a<-as_date(covid$date_of_interest,format="%m/%d/%Y")
a
class(a)
View(covid)
runApp()
covid<-covid[,!grepl("all_",colnames(covid))]
covid<-covid[,!grepl("probable_death_count",colnames(covid))]
View(covid)
covid <- covid %>%rename_all(funs(str_replace_all(., "_7day_avg", " (7day_avg)")))%>%
dplyr::select(-death_count_probable)
View(covid)
runApp()
runApp()
runApp()
# ================================ line plot =========================================================
covid$date_of_interest <-ymd(covid$date_of_interest)
covid_sub <-covid[,c(1,9:15)]%>%tidyr::pivot_longer(
cols = -date_of_interest,
names_to = "line_var",
values_to = "value") %>% #names_prefix = "fight_"
dplyr::mutate(line_var = as.factor(line_var))
View(covid_sub)
runApp()
setwd('D:\\wyr\\GR5243\\Spring2021-Project2-group5\\app')
runApp()
setwd('D:\\wyr\\GR5243\\Fall2021-Project2-group5\\app')
runApp()
runApp()
runApp()
runApp()
runApp()
