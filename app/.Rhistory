# install.packages("glmnet")
library(glmnet)
x_vars <-model.matrix(medv ~., data = boston)[,-1]
y_vars <-boston$medv
cvfit <- cv.glmnet(x_vars,y_vars, alpha =1 )
best_lam <- cvfit$lambda.min
plot(cvfit)
best_lam
lass_model <- glmnet(x_vars,y_vars,alpha = 1, lambda = best_lam)
perdictors <-boston[,c(1,2,3,5,6,7,10)]
perdictors <-boston[,c(1,2,3,5,6,7,10)]
cor(perdictors)
perdictors <-boston[,c(1,2,3,5,6,7,10)]
cor(perdictors)
mean(vif(lmfit))
perdictors <-boston[,c(1,2,3,5,6,7,10)]
cor(perdictors)
vif(lmfit,digits = 3)
mean(vif(lmfit))
### 2.Compare results based on the  usual linear regression and Principal Component Regression to predict  ‘medv' based on the  available variables.
lmfit <- lm(medv ~ crim + zn + indus + nox + rm + age + tax, data = boston )
summary(lmfit)
# install.packages("analogue")
# install.packages("pls")
library(pls)
library(analogue)
pcrmod <- pcr(medv ~ crim + zn + indus + nox + rm + age + tax, data = boston ,validation = 'CV')
summary(pcrmod)
validationplot(pcrmod)
### 3.Compare models selected using lasso vs a stepwise procedure to predict  ‘medv' using all available variables.
library(glmnet)
x_vars <-model.matrix(medv ~., data = boston)[,-1]
y_vars <-boston$medv
cvfit <- cv.glmnet(x_vars,y_vars, alpha =1 )
best_lam <- cvfit$lambda.min
plot(cvfit)
best_lam
lass_model <- glmnet(x_vars,y_vars,alpha = 1, lambda = best_lam)
### 3.Compare models selected using lasso vs a stepwise procedure to predict  ‘medv' using all available variables.
library(glmnet)
x_vars <-perdictors
y_vars <-boston$medv
cvfit <- cv.glmnet(x_vars,y_vars, alpha =1 )
### 3.Compare models selected using lasso vs a stepwise procedure to predict  ‘medv' using all available variables.
library(glmnet)
x_vars <-as.matrix(perdictors)
y_vars <-boston$medv
cvfit <- cv.glmnet(x_vars,y_vars, alpha =1 )
best_lam <- cvfit$lambda.min
plot(cvfit)
best_lam
lass_model <- glmnet(x_vars,y_vars,alpha = 1, lambda = best_lam)
### 3.Compare models selected using lasso vs a stepwise procedure to predict  ‘medv' using all available variables.
library(glmnet)
x_vars <-as.matrix(perdictors)
y_vars <-boston$medv
cvfit <- cv.glmnet(x_vars,y_vars, alpha =1 )
best_lam <- cvfit$lambda.min
plot(cvfit)
best_lam
lass_model <- glmnet(x_vars,y_vars,alpha = 1, lambda = best_lam)
cvfit$lambda.min
lass_model <- glmnet(x_vars,y_vars,alpha = 1, lambda = best_lam)
lass_model
lmfit_new <- lm(medv ~ crim + zn  + rm + age + tax, data = boston )
summary(lmfit_new)
set.seed(0)
data1 <- data.frame(cbind(Boston$medv,predictors))
set.seed(0)
data1 <- data.frame(cbind(boston$medv,perdictors))
index <- sample(1:nrow(data1), 100, replace = F)
test <- data1[index,]
train <- data1[-index,]
predlm <-predict(lmfit_new,test)
predpcr <-predict(pcrmod,test)
mse_lm <-mean((predlm - test[,1]) ^ 2)
mse_lm
mse_pcr <-mean((predpcr - test[,1]) ^2)
mse_pcr
mse_pcr <-mean((predpcr - test[,1]) ^2)
mse_pcr
mse_lm <-mean((predlm - test[,1]) ^ 2)
mse_lm
# install.packages("analogue")
# install.packages("pls")
library(pls)
library(analogue)
pcrmod <- pcr(medv ~ crim + zn + indus + nox + rm + age + tax, data = boston ,validation = 'CV')
summary(pcrmod)
validationplot(pcrmod)
# install.packages("analogue")
# install.packages("pls")
library(pls)
library(analogue)
pcrmod <- pcr(medv ~ crim + zn  + rm + age + tax, data = boston ,validation = 'CV')
summary(pcrmod)
validationplot(pcrmod)
set.seed(0)
data1 <- data.frame(cbind(boston$medv,perdictors))
index <- sample(1:nrow(data1), 100, replace = F)
test <- data1[index,]
train <- data1[-index,]
predlm <-predict(lmfit_new,test)
predpcr <-predict(pcrmod,test)
mse_lm <-mean((predlm - test[,1]) ^ 2)
mse_lm
mse_pcr <-mean((predpcr - test[,1]) ^2)
mse_pcr
coflasso <-coef(cvfit, s = cvfit$lambda.min)
coflasso
predlasso <-predict(cvfit,s = cvfit$lambda.min,as.matrix(perdictors))
mean((predlasso - as.matrix(boston$medv))^2)
predlasso <-predict(cvfit,s = cvfit$lambda.min,as.matrix(perdictors))
mean((predlasso - as.matrix(boston$medv))^2)
lmfit.setp <- step(lmfit, methods = 'backward')
lmfit.back <- step(lmfit, methods = 'backward')
lmfit.forw <- step(lmfit, methods = 'forward')
lmfit.both <- step(lmfit, methods = 'both')
predboth <-predict(lmfit.both,perdictors)
mse_both <-mean((boston$medv - predboth)^2)
predboth <-predict(lmfit.both,perdictors)
mse_both <-mean((boston$medv - predboth)^2)
mse_both
data.frame(Procedures = c("Performance when p >> n",
"Performance under multicollinearity",
"Unbiased estimaton",
"Model selection",
"Simplicity: Computation, Inference, Interpretation"),
OLS = c(3,2,1,2,2),
Ridge = c(2,1,2,1,2),
Lasso = c(2,1,3,1,1),
Elastic_Net=c(2,2,2,2,3))
data.frame(Procedures = c("Performance when p >> n",
"Performance under multicollinearity",
"Unbiased estimaton",
"Model selection",
"Simplicity: Computation, Inference, Interpretation"),
OLS = c(3,3,1,2,1),
Ridge = c(1,1,2,2,2),
Lasso = c(1,1,3,1,3),
Elastic_Net=c(1,1,2,1,3))
vif(lmfit)
validationplot(pcrmod)
# install.packages("analogue")
# install.packages("pls")
library(pls)
library(analogue)
pcrmod <- pcr(medv ~ crim + zn  + rm + age + tax, data = boston ,validation = 'CV')
summary(pcrmod)
validationplot(pcrmod)
library(shiny)
library(shiny)
library(shiny)
library(shiny)
runApp('Desktop/shinyapp')
runApp('Desktop/shinyapp')
runApp('Desktop/shinyapp')
runApp('Desktop/shinyapp')
getwad()
getwd()
list.files()
library(maps)
library(ggplot2)
world_map <-map_data("world")
View(world_map)
newyorkmap <-subset(world_map,world_map$subregion =="New York")
newyorkmap <-subset(world_map,world_map$subregion =="New York")
newyorkmap
freemeal <- read.csv("COVID-19_Free_Meals_Locations.csv")
freemeal <- read.csv("/Users/jinglu/Desktop/shinyapp/COVID-19_Free_Meals_Locations.csv")
View(freemeal)
map_data <-
newyorkmap +
geom_point(data = freemeal,
aes(x = Longitude, y = Latitude))
map_data <-
base_world +
geom_point(data = freemeal,
aes(x = Longitude, y = Latitude))
map_data <-
newyorkmap +
geom_point(data = freemeal,
aes(x = Longitude, y = Latitude))
map_data <- newyorkmap + geom_point(data = freemeal,aes(x = freemeal$Longitude, y = freemeal$Latitude))
freemeal <- read.csv("/Users/jinglu/Desktop/shinyapp/COVID-19_Free_Meals_Locations.csv")
bronx  <- as.data.frame(freemeal$City == "Bronx")
View(bronx)
freemeal <- read.csv("/Users/jinglu/Desktop/shinyapp/COVID-19_Free_Meals_Locations.csv")
bronx  <- as.data.frame(freemeal$Longitude[freemeal$City == "Bronx"])
View(bronx)
freemeal <- read.csv("/Users/jinglu/Desktop/shinyapp/COVID-19_Free_Meals_Locations.csv")
bronx  <- as.data.frame(freemeal$Longitude[freemeal$City == "Bronx"],freemeal$Latitude[freemeal$City == "Bronx"])
View(bronx)
freemeal <- read.csv("/Users/jinglu/Desktop/shinyapp/COVID-19_Free_Meals_Locations.csv")
bronx  <- read.csv("/Users/jinglu/Desktop/shinyapp/Bronxdata.csv")
View(bronx)
map_data <- newyorkmap + geom_point(data = bronx,aes(x =bronx$X.73.908358, y = bronx$X40.813896))
map_data <- newyorkmap + geom_point(data = bronx,aes(x =bronx$X.73.908358, y = bronx$X40.813896))
map_data <- newyorkmap + geom_point(data = bronx,aes(x =bronx$X.73.908358, y = bronx$X40.813896))
map_data <-
newyorkmap +
geom_point(data=bronx,
aes(x= X.73.908358, y= X40.813896), colour="Deep Pink",
fill="Pink",pch=21, size=5, alpha=I(0.7))
install.packages('sf')
library(devtools)
install_github("r-spatial/sf")
brew install pkg-config
shiny::runApp('Desktop/shinyapp/leaflet')
df <- ChickWeight;
View(df)
df1 <- data.frame(df$weight[df$Diet == 1])
View(df1)
df1 <- data.frame(df$weight[df$Diet == 1])
df2 <- data.frame(df$weight[df$Diet == 2])
df3 <- data.frame(df$weight[df$Diet == 3])
df4 <- data.frame(df$weight[df$Diet == 4])
t.test(df1)
t.test(df1)
t.test(df2)
t.test(df3)
t.test(df4)
t.test(df1,df2,df3,df4)
t.test(df1)
df <- ChickWeight;
df <- ChickWeight;
day18 <-df[df$Time == 18,]
day0 <- df[df$Time == 0,]
bw18 <-day0[!(day0$Chick %int% c(15, 16, 18)), ]$weight
View(day0)
bw18 <-day0[!(day0$Chick %in% c(15, 16, 18)), ]$weight
aov18 <- aov(day18$weight~day18$Diet + bw18)
aov18 <- aov(day18$weight~day18$Diet + bw18)
summary(aov18)
day18 <- subset(df,Time == 18)
View(day18)
anova_day18 <-aov(data = day18, weight ~ Diet)
anova_day18
anova_day18 <-aov(data = day18, weight ~ Diet)
anova_day18
summary(anova_day18)
### 1.Determine whether there is a significant difference in the mean weights of the four groups on Day 18
## 1.Determine whether there is a significant difference in the mean weights of the four groups on Day 18
# 1.Determine whether there is a significant difference in the mean weights of the four groups on Day 18
1.Determine whether there is a significant difference in the mean weights of the four groups on Day 18
** 1.Determine whether there is a significant difference in the mean weights of the four groups on Day 18 **
# ** 1.Determine whether there is a significant difference in the mean weights of the four groups on Day 18 **
# 1.Determine whether there is a significant difference in the mean weights of the four groups on Day 18
day18 <- subset(df,Time == 18)
anova_day18 <-aov(data = day18, weight ~ Diet)
anova_day18
summary(anova_day18)
day0 <-subset(df, Time == 0)
day18[, 'birthweight'] <- subset(day0$weight[match(day18$Chick,day0$Chick)])
day0 <-subset(df, Time == 0)
day18[, 'birthweight'] <- (day0$weight[match(day18$Chick,day0$Chick)])
group_mean <- aggregate(day18$birthweight,list(day18$Diet), mean)
colnames(group_mean) <- c('Diet','birthweight_mean')
group_mean
day18 <-merge(day18,group_mean)
day18
day18 <-merge(day18,group_mean)
head(day18)
day18 <-merge(day18,group_mean)
head(day18)
pairwise.t.test(day18$weight,day18$Diet, p.adjust = "bonferroni")
TukeyHSD(x = anova_day18, conf.level = 0.95)
kruskal.test(weight ~ Diet, data = day18)
day0 <-subset(df, Time == 0)
day18[, 'birthweight'] <- (day0$weight[match(day18$Chick,day0$Chick)])
group_mean <- aggregate(day18$birthweight,list(day18$Diet), mean)
colnames(group_mean) <- c('Diet','birthweight_mean')
group_mean
day18 <-merge(day18,group_mean)
head(day18)
pairwise.t.test(day18$weight,day18$Diet, p.adjust = "bonferroni")
anova_adjust_day18 <- aov(data = day18, weight ~ dirthweight + Diet)
anova_adjust_day18 <- aov(data = day18, weight ~ birthweight + Diet)
summary(anova_adjust_day18)
View(anova_adjust_day18)
install.packages(lsmeans)
library(lsmeans)
install.packages(lsmeans)
install.packages("lsmeans")
library(lsmeans)
install.packages("emmeans")
install.packages("emmeans")
library(lsmeans)
library(lsmeans)
lsmean <- lsmeans(anova_adjust_day18,'Diet')
lsmean
library(ggplot2)
library(ggplot2)
residual <- data.frame(anova_day18['residuals'],day18['Diet'])
normal_plot <- ggplot(data =  residual,aes(sample == residuals)) + stat_qq() + ggtitle("QQ of Residuals") +
ylab("residuals") + xlab('Theoretical Quantitles')
library(ggplot2)
residual <- data.frame(anova_day18['residuals'],day18['Diet'])
normal_plot <- ggplot(data =  residual,aes(sample == residuals)) + stat_qq() + ggtitle("QQ of Residuals") +
ylab("residuals") + xlab('Theoretical Quantitles')
resid_quantile<-quantile(residual$residuals,c(0.25,0.75))
norm_quantile<-qnorm(c(0.25,0.75))
slope<-diff(resid_quantile)/diff(norm_quantile)
library(ggplot2)
residual <- data.frame(anova_day18['residuals'],day18['Diet'])
normal_plot <- ggplot(data =  residual,aes(sample == residuals)) + stat_qq() + ggtitle("QQ of Residuals") +
ylab("residuals") + xlab('Theoretical Quantitles')
resid_quantile<-quantile(residual$residuals,c(0.25,0.75))
norm_quantile<-qnorm(c(0.25,0.75))
slope<-diff(resid_quantile)/diff(norm_quantile)
library(ggplot2)
residual <- data.frame(anova_day18['residuals'],day18['Diet'])
normal_plot <- ggplot(data =  residual,aes(sample == residuals)) + stat_qq() + ggtitle("QQ of Residuals") +
ylab("residuals") + xlab('Theoretical Quantitles')
resid_quantile<-quantile(residual$residuals,c(0.25,0.75))
norm_quantile<-qnorm(c(0.25,0.75))
slope < -diff(resid_quantile)/diff(norm_quantile)
library(ggplot2)
residual <- data.frame(anova_day18['residuals'],day18['Diet'])
normal_plot <- ggplot(data =  residual,aes(sample == residuals)) + stat_qq() + ggtitle("QQ of Residuals") +
ylab("residuals") + xlab('Theoretical Quantitles')
resid_quantile<-quantile(residual$residuals,c(0.25,0.75))
norm_quantile<-qnorm(c(0.25,0.75))
slope < -(resid_quantile)/(norm_quantile)
library(ggplot2)
residual <- data.frame(anova_day18['residuals'],day18['Diet'])
normal_plot <- ggplot(data =  residual,aes(sample == residuals)) + stat_qq() + ggtitle("QQ of Residuals") +
ylab("residuals") + xlab('Theoretical Quantitles')
resid_quantile<-quantile(residual$residuals,c(0.25,0.75))
norm_quantile<-qnorm(c(0.25,0.75))
slope < -diff(resid_quantile)/diff(norm_quantile)
library(ggplot2)
residual <- data.frame(anova_day18['residuals'],day18['Diet'])
normal_plot <- ggplot(data =  residual,aes(sample == residuals)) + stat_qq() + ggtitle("QQ of Residuals") +
ylab("residuals") + xlab('Theoretical Quantitles')
resid_quantile<-quantile(residual$residuals,c(0.25,0.75))
norm_quantile<-qnorm(c(0.25,0.75))
slope< -diff(resid_quantile)/diff(norm_quantile)
library(ggplot2)
residual <- data.frame(anova_day18['residuals'],day18['Diet'])
normal_plot <- ggplot(data =  residual,aes(sample == residuals)) + stat_qq() + ggtitle("QQ of Residuals") +
ylab("residuals") + xlab('Theoretical Quantitles')
resid_quantile<-quantile(residual$residuals,c(0.25,0.75))
norm_quantile<-qnorm(c(0.25,0.75))
slope< -diff(resid_quantile) / diff(norm_quantile)
library(ggplot2)
residual <- data.frame(anova_day18['residuals'],day18['Diet'])
normal_plot <- ggplot(data =  residual,aes(sample == residuals)) + stat_qq() + ggtitle("QQ of Residuals") +
ylab("residuals") + xlab('Theoretical Quantitles')
resid_quantile<-quantile(residual$residuals,c(0.25,0.75))
norm_quantile<-qnorm(c(0.25,0.75))
slope < -diff(resid_quantile) / diff(norm_quantile)
library(ggplot2)
residual <- data.frame(anova_day18['residuals'],day18['Diet'])
normal_plot <- ggplot(data =  residual,aes(sample == residuals)) + stat_qq() + ggtitle("QQ of Residuals") +
ylab("residuals") + xlab('Theoretical Quantitles')
resid_quantile<-quantile(residual$residuals,c(0.25,0.75))
norm_quantile<-qnorm(c(0.25,0.75))
slope < -(diff(resid_quantile)) / (diff(norm_quantile))
pairwise.t.test(day18$weight,day18$Diet, p.adjust = "bonferroni")
TukeyHSD(x = anova_day18, conf.level = 0.95)
kruskal.test(weight ~ Diet, data = day18)
kruskal.test(weight ~ Diet, data = day18)
library(ggplot2)
residual <- data.frame(anova_day18['residuals'],day18['Diet'])
normal_plot <- ggplot(data =  residual,aes(sample == residuals)) + stat_qq() + ggtitle("QQ of Residuals") +
ylab("residuals") + xlab('Theoretical Quantitles')
resid_quantile <- quantile(residual$residuals,c(0.25,0.75))
norm_quantile <- qnorm(c(0.25,0.75))
slope < -(diff(resid_quantile)) / (diff(norm_quantile))
library(ggplot2)
residual <- data.frame(anova_day18['residuals'],day18['Diet'])
normal_plot <- ggplot(data =  residual,aes(sample == residuals)) + stat_qq() + ggtitle("QQ of Residuals") +
ylab("residuals") + xlab('Theoretical Quantitles')
resid_quantile <- quantile(residual$residuals,c(0.25,0.75))
norm_quantile <- qnorm(c(0.25,0.75))
slope < -diff(resid_quantile)/ diff(norm_quantile)
df <- ChickWeight;
day18 <- subset(df,Time == 18)
anova_day18 <-aov(data = day18, weight ~ Diet)
anova_day18
summary(anova_day18)
day0 <-subset(df, Time == 0)
day18[, 'birthweight'] <- (day0$weight[match(day18$Chick,day0$Chick)])
group_mean <- aggregate(day18$birthweight,list(day18$Diet), mean)
colnames(group_mean) <- c('Diet','birthweight_mean')
group_mean
day18 <-merge(day18,group_mean)
head(day18)
### adjsut data
anova_adjust_day18 <- aov(data = day18, weight ~ birthweight + Diet)
summary(anova_adjust_day18)
library(lsmeans)
lsmean <- lsmeans(anova_adjust_day18,'Diet')
lsmean
library(ggplot2)
residual <- data.frame(anova_day18['residuals'],day18['Diet'])
normal_plot <- ggplot(data =  residual,aes(sample == residuals)) + stat_qq() + ggtitle("QQ of Residuals") +
ylab("residuals") + xlab('Theoretical Quantitles')
resid_quantile <- quantile(residual$residuals,c(0.25,0.75))
norm_quantile <- qnorm(c(0.25,0.75))
slope < -diff(resid_quantile)/ diff(norm_quantile)
library(ggplot2)
residual <- data.frame(anova_day18['residuals'],day18['Diet'])
normal_plot <- ggplot(data =  residual,aes(sample == residuals)) + stat_qq() + ggtitle("QQ of Residuals") +
ylab("residuals") + xlab('Theoretical Quantitles')
resid_quantile <- quantile(residual$residuals,c(0.25,0.75))
norm_quantile <- qnorm(c(0.25,0.75))
s < -diff(resid_quantile)/ diff(norm_quantile)
library(ggplot2)
residual <- data.frame(anova_day18['residuals'],day18['Diet'])
normal_plot <- ggplot(data =  residual,aes(sample == residuals)) + stat_qq() + ggtitle("QQ of Residuals") +
ylab("residuals") + xlab('Theoretical Quantitles')
resid_quantile <- quantile(residual$residuals,c(0.25,0.75))
norm_quantile <- qnorm(c(0.25,0.75))
s <- diff(resid_quantile)/ diff(norm_quantile)
inter <- resid_quantile[1]-s*norm_quantile[1]
normal_plot+geom_abline(slope=slope,intercept=inter,linetype=2,color='red')
library(ggplot2)
residual <- data.frame(anova_day18['residuals'],day18['Diet'])
normal_plot <- ggplot(data =  residual,aes(sample == residuals)) + stat_qq() + ggtitle("QQ of Residuals") +
ylab("residuals") + xlab('Theoretical Quantitles')
resid_quantile <- quantile(residual$residuals,c(0.25,0.75))
norm_quantile <- qnorm(c(0.25,0.75))
slope <- diff(resid_quantile)/ diff(norm_quantile)
inter <- resid_quantile[1]-slope*norm_quantile[1]
normal_plot+geom_abline(slope=slope,intercept=inter,linetype=2,color='red')
library(ggplot2)
residual <- data.frame(anova_day18['residuals'],day18['Diet'])
normal_plot <- ggplot(data =  residual,aes(sample == residuals)) + stat_qq() + ggtitle("QQ of Residuals") +
ylab("residuals") + xlab('Theoretical Quantitles')
resid_quantile <- quantile(residual$residuals,c(0.25,0.75))
norm_quantile <- qnorm(c(0.25,0.75))
slope <- diff(resid_quantile)/ diff(norm_quantile)
inter <- resid_quantile[1]-slope*norm_quantile[1]
normal_plot + geom_abline(slope = slope,intercept = inter,linetype = 2,color='red')
library(ggplot2)
residual <- data.frame(anova_day18['residuals'],day18['Diet'])
normal_plot <- ggplot(data =  residual,aes(sample = residuals)) + stat_qq() + ggtitle("QQ of Residuals") +
ylab("residuals") + xlab('Theoretical Quantitles')
resid_quantile <- quantile(residual$residuals,c(0.25,0.75))
norm_quantile <- qnorm(c(0.25,0.75))
slope <- diff(resid_quantile)/ diff(norm_quantile)
inter <- resid_quantile[1]-slope*norm_quantile[1]
normal_plot + geom_abline(slope = slope,intercept = inter,linetype = 2,color='red')
shapiro.test(residual$residuals)
leveneTest(y = day18$weight,group = as.factor(day18$Diet))
library(lsmeans)
lsmean <- lsmeans(anova_adjust_day18,'Diet')
lsmean
LeveneTest(y = day18$weight,group = as.factor(day18$Diet))
library(car)
LeveneTest(y = day18$weight,group = as.factor(day18$Diet))
library(car)
leveneTest(y = day18$weight,group = as.factor(day18$Diet))
anova_inter <- aov(weight ~ birthweight * Diet, data = day18)
summary(anova_inter)
shiny::runApp('Desktop/shinyapp/leaflet')
load("/Users/jinglu/Downloads/processed_data.Rda")
shiny::runApp('Desktop/shinyapp/leaflet')
runApp('Desktop/shinyapp/leaflet')
runApp('Desktop/shinyapp/leaflet')
runApp('Desktop/shinyapp/leaflet')
load("/Users/jinglu/Documents/GitHub/Spring2021-Project2-group5/app/output/processed_data.Rda")
shiny::runApp('Desktop/shinyapp/leaflet')
runApp('Desktop/shinyapp/leaflet')
shiny::runApp('Desktop/shinyapp/leaflet')
runApp('Desktop/shinyapp/leaflet')
runApp('Desktop/shinyapp/leaflet')
runApp('Desktop/shinyapp/leaflet')
shiny::runApp('Desktop/shinyapp/leaflet')
runApp('Desktop/shinyapp/leaflet')
shiny::runApp('Desktop/shinyapp/leaflet')
runApp('Desktop/shinyapp/leaflet')
runApp('Desktop/shinyapp/leaflet')
runApp('Desktop/shinyapp/leaflet')
runApp('Desktop/shinyapp/leaflet')
runApp()
runApp('Desktop/shinyapp/leaflet')
shiny::runApp('Desktop/shinyapp')
runApp('Desktop/shinyapp')
library(colorspace)
shiny::runApp('Documents/GitHub/Fall2021-Project2-group5/app')
runApp('Documents/GitHub/Fall2021-Project2-group5/app')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='fall2021-project2-group5',
token='FD4CFFD44D226FCEE0F66658DC51D22C',
secret='<SECRET>')
rsconnect::setAccountInfo(name='fall2021-project2-group5',
token='FD4CFFD44D226FCEE0F66658DC51D22C',
secret='<SECRET>')
library(rsconnect)
rsconnect::deployApp('')
getwd()
rsconnect::deployApp( "/Users/jinglu")
rsconnect::setAccountInfo(name='fall2021-project2-group5',
token='FD4CFFD44D226FCEE0F66658DC51D22C',
secret='0FB5ewhJu9qpYZvGb0KKWIrTluIwht3DndERB6kY')
library(rsconnect)
rsconnect::deployApp('/Users/jinglu/Documents/GitHub/Fall2021-Project2-group5/app')
rsconnect::deployApp('/Users/jinglu/Documents/GitHub/Fall2021-Project2-group5/app/app.R')
runApp('Documents/GitHub/Fall2021-Project2-group5/app')
version
if(!require(raster)) install.packages("raster")
library(raster)
if(!require(terra)) install.packages("terra")
if(!require(htmltools)) install.packages("htmltools", repos = "http://cran.us.r-project.org")
shiny::runApp('Documents/GitHub/Fall2021-Project2-group5/app')
runApp('Documents/GitHub/Fall2021-Project2-group5/app')
shiny::runApp('Documents/GitHub/Fall2021-Project2-group5/app')
runApp('Documents/GitHub/Fall2021-Project2-group5/app')
runApp('Documents/GitHub/Fall2021-Project2-group5/app')
