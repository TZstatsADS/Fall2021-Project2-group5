pcr_fit<-pcr(medv~crim+zn+indus+nox+rm+age+tax,data=df)
summary(pcr_fit)
pcr_fit
validationplot(pcr_fit)
validationplot(pcr_fit, val.type="R2")
rmse_pcr=sqrt(mean((df$medv-pcr_fit$fitted.values)^2))
rmse_pcr
library(pls)
pcr_fit<-pcr(medv~crim+zn+indus+nox+rm+age+tax,data=df)
summary(pcr_fit)
pcr_fit
validationplot(pcr_fit)
validationplot(pcr_fit, val.type="R2")
pcrfit=predict(pcr_fit,ncomp = 6,newx=df1)
rmse_pcr=sqrt(mean((df$medv-pcrfit)^2))
rmse_pcr
library(pls)
pcr_fit<-pcr(medv~crim+zn+indus+nox+rm+age+tax,data=df)
summary(pcr_fit)
validationplot(pcr_fit)
validationplot(pcr_fit, val.type="R2")
pcrfit=predict(pcr_fit,ncomp = 6,newx=df1)
rmse_pcr=sqrt(mean((df$medv-pcrfit)^2))
rmse_pcr
library(pls)
pcr_fit<-pcr(medv~crim+zn+indus+nox+rm+age+tax,data=df)
summary(pcr_fit)
validationplot(pcr_fit)
validationplot(pcr_fit, val.type="R2")
pcrfit=predict(pcr_fit,ncomp = 6,newx=df1)
rmse_pcr=sqrt(mean((df$medv-pcrfit)^2))
rmse_pcr
#bestlambda
best_lambda<-cvlasso$lambda.min
best_lambda
#regression coef
blasso<-glmnet(df1,df$medv,alpha = 1,lambda = best_lambda)
coef(blasso)
predict_lasso<-predict(blasso,newx = df1,s="lambda.min")
RMSE_lasso<-sqrt(mean((df$medv-predict_lasso)^2))
RMSE_lasso
#bestlambda
best_lambda<-cvlasso$lambda.min
best_lambda
#regression coef
blasso<-glmnet(df1,df$medv,alpha = 1,lambda = best_lambda)
coef(blasso)
predict_lasso<-predict(blasso,newx = df1,s="lambda.min")
RMSE_lasso<-sqrt(mean((df$medv-predict_lasso)^2))
RMSE_lasso
table1<-data.frame(rowname=c("Performance when p >> n", "Performance under multicollinearity", "Unbiased estimation","Model selection","Simplicity: Computation, Inference, Interpretation"),
OLS=c(3,3,1,2,1),
Ridge=c(2,1,3,3,2),
lasso=c(1,2,3,1,1),
`Elastic Net`=c(1,1,3,2,3))
table1
shiny::runApp('D:/wyr/GR5243/Fall2021-Project2-group5/app')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
df<-data("ChickWeight")
df
df<-ChickWeight
View(df)
library(tidyverse)
df<-ChickWeight
head(df)
library(tidyverse)
df0<-ChickWeight
head(df0)
df<-df0%>%filter(Time==18)
a<-anova(data=df,Weight~Diet)
a<-aov(data=df,Weight~Diet)
a<-aov(data=df,weight~Diet)
summary(a)
knitr::opts_chunk$set(echo = TRUE)
t1<-read.csv("../2021VAERSDATA.csv")
t1<-read.csv("../data/2021VAERSDATA.csv")
t1<-read.csv("./data/2021VAERSDATA.csv")
t2<-read.csv("./data/2021VAERSVAX.csv")
View(t2)
#load original datasets
library(tidyverse)
t1<-read.csv("./data/2021VAERSDATA.csv")
t2<-read.csv("./data/2021VAERSVAX.csv")
t2<-read.csv("./data/2021VAERSVAX.csv")
t1<-read_csv("./data/2021VAERSDATA.csv")
t2<-read_csv("./data/2021VAERSVAX.csv")
t3<-read_csv("./data/2021VAERSSYMPTOMS.csv")
View(t2)
View(t2)
t2<-t2%>%filter(VAX_TYPE=='COVID19'&(VAX_MANU=='MODERNA'|VAX_MANU=='PFIZER\BIONTECH'))%>%
t2<-t2%>%filter(VAX_TYPE=='COVID19'&(VAX_MANU=='MODERNA'|VAX_MANU=="PFIZER\BIONTECH"))%>%
t2<-t2%>%filter(VAX_TYPE=='COVID19'&(VAX_MANU=='MODERNA'|VAX_MANU=="PFIZER\\BIONTECH"))%>%
dplyr::select(VAERS_ID,VAX_MANU,VAX_DOSE_SERIES)
View(t2)
View(t1)
#clean data
t1<-t1%>%dplyr::select(-STATE,-RECVDATE,-RPT_DATE,-LAB_DATA,-(V_ADMINBY:t1$OTHER_MEDS),-SPLTTYPE,-TODAYS_DATE,-OFC_VISIT,-ER_ED_VISIT)
#clean data
t1<-t1%>%dplyr::select(-STATE,-RECVDATE,-RPT_DATE,-LAB_DATA,-(V_ADMINBY:t1$OTHER_MEDS),-SPLTTYPE,-TODAYS_DATE,-OFC_VISIT,-ER_ED_VISIT)
#clean data
t1<-t1%>%dplyr::select(-RECVDATE,-STATE,-RPT_DATE,-LAB_DATA,-(V_ADMINBY:t1$OTHER_MEDS),-SPLTTYPE,-TODAYS_DATE,-OFC_VISIT,-ER_ED_VISIT)
rlang::last_error()
#clean data
t1<-t1%>%dplyr::select(-RECVDATE,-STATE,-RPT_DATE,-LAB_DATA,-(V_ADMINBY:OTHER_MEDS),-SPLTTYPE,-TODAYS_DATE,-OFC_VISIT,-ER_ED_VISIT)
View(t1)
#clean data
t1<-t1%>%dplyr::select(-RECVDATE,-STATE,-RPT_DATE,CAGE_MO,-LAB_DATA,-(V_ADMINBY:OTHER_MEDS),-SPLTTYPE,-TODAYS_DATE,-OFC_VISIT,-ER_ED_VISIT)
#load original datasets
library(tidyverse)
t1<-read_csv("./data/2021VAERSDATA.csv")
t2<-read_csv("./data/2021VAERSVAX.csv")
t3<-read_csv("./data/2021VAERSSYMPTOMS.csv")
#clean data
t1<-t1%>%dplyr::select(-RECVDATE,-STATE,-RPT_DATE,CAGE_MO,-LAB_DATA,-(V_ADMINBY:OTHER_MEDS),-SPLTTYPE,-TODAYS_DATE,-OFC_VISIT,-ER_ED_VISIT)
t2<-t2%>%filter(VAX_TYPE=='COVID19'&(VAX_MANU=='MODERNA'|VAX_MANU=="PFIZER\\BIONTECH"))%>%
dplyr::select(VAERS_ID,VAX_MANU,VAX_DOSE_SERIES)
#combine data
df<-t1%>%inner_join(t2,by='VAERS_ID')%>%inner_join(t3,by='VAERS_ID')
head(df)
View(t3)
t3<-t3%>%dplyr::select(VAERS_ID,SYMPTOM1,SYMPTOM2,SYMPTOM3,SYMPTOM4,SYMPTOM5)
#combine data
df<-t1%>%inner_join(t2,by='VAERS_ID')%>%inner_join(t3,by='VAERS_ID')
head(df)
View(df)
t2<-t2%>%filter(VAX_TYPE=='COVID19'&(VAX_MANU=='MODERNA'|VAX_MANU=="PFIZER\\BIONTECH"))%>%
dplyr::select(VAERS_ID,VAX_MANU,VAX_DOSE_SERIES)%>%drop_na()
t2<-read_csv("./data/2021VAERSVAX.csv")
t2<-t2%>%filter(VAX_TYPE=='COVID19'&(VAX_MANU=='MODERNA'|VAX_MANU=="PFIZER\\BIONTECH"))%>%
dplyr::select(VAERS_ID,VAX_MANU,VAX_DOSE_SERIES)%>%drop_na()
#clean data
t1<-t1%>%dplyr::select(-RECVDATE,-STATE,-RPT_DATE,CAGE_MO,-LAB_DATA,-(V_ADMINBY:OTHER_MEDS),-SPLTTYPE,-TODAYS_DATE,-OFC_VISIT,-ER_ED_VISIT, -(SYMPTOM_TEXT:CUR_ILL))
t1<-read_csv("./data/2021VAERSDATA.csv")
View(t1)
#clean data
t1<-t1%>%dplyr::select(VAERS_ID,AGE_YRS,CAGE_YR,SEX)
#combine data
df<-t1%>%inner_join(t2,by='VAERS_ID')%>%inner_join(t3,by='VAERS_ID')%>%
group_by(VAX_MANU)
head(df)
#combine data
df<-t1%>%inner_join(t2,by='VAERS_ID')%>%inner_join(t3,by='VAERS_ID')%>%
group_by(VAERS_ID,VAX_MANU)
head(df)
t3<-t3%>%unite('SYMPTOM',SYMPTOM1,SYMPTOM2,SYMPTOM3,SYMPTOM4,SYMPTOM5,sep = '|')
View(t3)
#combine data
df<-t1%>%inner_join(t2,by='VAERS_ID')%>%inner_join(t3,by='VAERS_ID')%>%
group_by(VAX_MANU,VAERS_ID)
head(df)
#find the most frequent symptoms of each group
df1<-df%>%separate_rows(SYMPTOM,sep='[|]')%>%
select(SYMPTOM)
#visualize second source
df1%>%ggplot(aes(SYMPTOM))+geom_bar()+
labs(title='Distribution of each SYMPTOMs',x='SYMPTOM')+
theme(plot.title = element_text(hjust =0.5))+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
#find the most frequent symptoms of each group
df1<-df%>%separate_rows(SYMPTOM,sep='[|]')%>%
select(VAX_MANU, VAERS_ID,SYMPTOM)%>%count()
View(df1)
#find the most frequent symptoms of each group
df1<-df%>%separate_rows(SYMPTOM,sep='[|]')%>%
select(VAX_MANU, VAERS_ID,SYMPTOM)%>%ungroup()%>%
filter(SYMPTOM!='NA')%>%
group_by(VAX_MANU,SYMPTOM)%>%count()
#find the most frequent symptoms of each group
df1<-df%>%separate_rows(SYMPTOM,sep='[|]')%>%
select(VAX_MANU, VAERS_ID,SYMPTOM)%>%ungroup()%>%
filter(SYMPTOM!='NA')%>%
group_by(VAX_MANU,SYMPTOM)%>%count()%>%arrange(desc(n))
#combine data
df<-t1%>%inner_join(t2,by='VAERS_ID')%>%inner_join(t3,by='VAERS_ID')
pfizer<-df%>%filter(VAX_MANU=='PFIZER\\BIONTECH')
moderna<-df%>%filter(VAX_MANU=='MODERNA')
most_freq_symp<-function(df){
df1<-df%>%ungroup()%>%select(SYMPTOM)%>%
separate_rows(SYMPTOM,sep='[|]')%>%filter(SYMPTOM!='NA')%>%
group_by(SYMPTOM)%>%count()%>%arrange(desc(n))
return(df1)
}
symp_pfi<-most_freq_symp(pfizer)
symp_mod<-most_freq_symp(moderna)
View(symp_mod)
View(symp_pfi)
View(df)
pfizer<-df%>%filter(VAX_MANU=='PFIZER\\BIONTECH')%>%group_by(VAX_DOSE_SERIES)
moderna<-df%>%filter(VAX_MANU=='MODERNA')%>%group_by(VAX_DOSE_SERIES)
View(pfizer)
most_freq_symp<-function(df){
df1<-df%>%ungroup()%>%select(VAX_DOSE_SERIES,SYMPTOM)%>%
separate_rows(SYMPTOM,sep='[|]')%>%filter(SYMPTOM!='NA')%>%
group_by(SYMPTOM)%>%count()%>%arrange(desc(n))
return(df1)
}
symp_pfi<-most_freq_symp(pfizer)
symp_mod<-most_freq_symp(moderna)
most_freq_symp<-function(df){
df1<-df%>%ungroup()%>%select(VAX_DOSE_SERIES,SYMPTOM)%>%
separate_rows(SYMPTOM,sep='[|]')%>%filter(SYMPTOM!='NA')%>%
group_by(VAX_DOSE_SERIES,SYMPTOM)%>%count()%>%arrange(desc(n))
return(df1)
}
symp_pfi<-most_freq_symp(pfizer)
View(moderna)
View(pfizer)
unique(pfizer$VAERS_ID)
unique(moderna$VAERS_ID)
count(unique(pfizer$VAERS_ID))
#total number of adverse events of each manufacturer
which(unique(pfizer$VAERS_ID))
length(unique(pfizer$VAERS_ID))
length(unique(moderna$VAERS_ID))
t01<-read_csv("./data/2020VAERSDATA.csv")
t02<-read_csv("./data/2020VAERSVAX.csv")
t03<-read_csv("./data/2020VAERSSYMPTOMS.csv")
#load original datasets
library(tidyverse)
t01<-read_csv("./data/2020VAERSDATA.csv")
t02<-read_csv("./data/2020VAERSVAX.csv")
t02<-read_csv("./data/2020VAERSVAX.csv")
t03<-read_csv("./data/2020VAERSSYMPTOMS.csv")
t11<-read_csv("./data/2021VAERSDATA.csv")
t12<-read_csv("./data/2021VAERSVAX.csv")
t13<-read_csv("./data/2021VAERSSYMPTOMS.csv")
#clean data
t1<-rbind(t01,t1)%>%dplyr::select(VAERS_ID,AGE_YRS,CAGE_YR,SEX)
#clean data
t1<-rbind(t01,t11)%>%dplyr::select(VAERS_ID,AGE_YRS,CAGE_YR,SEX)
View(t1)
#clean data
t1<-rbind(t01,t11)%>%dplyr::select(VAERS_ID,AGE_YRS,CAGE_YR,SEX)
#-RECVDATE,-STATE,-RPT_DATE,CAGE_MO,-LAB_DATA,-(V_ADMINBY:OTHER_MEDS),-SPLTTYPE,-TODAYS_DATE,-OFC_VISIT,-ER_ED_VISIT
t2<-rbind(t02,t12)%>%filter(VAX_TYPE=='COVID19'&(VAX_MANU=='MODERNA'|VAX_MANU=="PFIZER\\BIONTECH"))%>%
dplyr::select(VAERS_ID,VAX_MANU,VAX_DOSE_SERIES)%>%drop_na()
t3<-rbind(t03,t13)%>%unite('SYMPTOM',SYMPTOM1,SYMPTOM2,SYMPTOM3,SYMPTOM4,SYMPTOM5,sep = '|')%>%dplyr::select(VAERS_ID,SYMPTOM)
#dplyr::select(VAERS_ID,SYMPTOM1,SYMPTOM2,SYMPTOM3,SYMPTOM4,SYMPTOM5)
#combine data and divide into two subsets based on vaccine manufacturer
df<-t1%>%inner_join(t2,by='VAERS_ID')%>%inner_join(t3,by='VAERS_ID')
pfizer<-df%>%filter(VAX_MANU=='PFIZER\\BIONTECH')%>%group_by(VAX_DOSE_SERIES)
moderna<-df%>%filter(VAX_MANU=='MODERNA')%>%group_by(VAX_DOSE_SERIES)
#total number of adverse events of each manufacturer
length(unique(pfizer$VAERS_ID))
length(unique(moderna$VAERS_ID))
#find the most frequent symptoms of each group
most_freq_symp<-function(df){
df1<-df%>%ungroup()%>%select(VAX_DOSE_SERIES,SYMPTOM)%>%
separate_rows(SYMPTOM,sep='[|]')%>%filter(SYMPTOM!='NA')%>%
group_by(VAX_DOSE_SERIES,SYMPTOM)%>%count()%>%arrange(desc(n))
return(df1)
}
symp_pfi<-most_freq_symp(pfizer)
symp_mod<-most_freq_symp(moderna)
#visualize second source
df1%>%ggplot(aes(SYMPTOM))+geom_bar()+
labs(title='Distribution of each SYMPTOMs',x='SYMPTOM')+
theme(plot.title = element_text(hjust =0.5))+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
View(t1)
View(t11)
View(symp_mod)
View(symp_pfi)
#load data of total number vaccine
total<-read_csv("./data/COVID-19_Vaccinations.csv")
View(total)
temp<-total%>%filter(Date=='09/24/2021')%>%select(Distributed_Moderna,Distributed_Pfizer)%>%summarise(mod=sum(Distributed_Moderna),pfi=sum(Distributed_Pfizer))
View(temp)
temp<-total%>%filter(Date=='09/24/2021')%>%select(Distributed_Moderna,Distributed_Pfizer,Series_Complete_Moderna,Series_Complete_Pfizer)%>%summarise(mod=sum(Distributed_Moderna),pfi=sum(Distributed_Pfizer),mod_comp=sum(Series_Complete_Moderna),pfi_comp=sum(Series_Complete_Pfizer))
df%>%ggplot(aes(SYMPTOM))+geom_bar()+
labs(title='Distribution of each SYMPTOMs',x='SYMPTOM')+
theme(plot.title = element_text(hjust =0.5))+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
return(p)
p<-data%>%ggplot(aes(SYMPTOM))+geom_bar()+
labs(title='Distribution of each SYMPTOMs',x='SYMPTOM')+
theme(plot.title = element_text(hjust =0.5))+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
#visualize
freq<-function(data){
p<-data%>%ggplot(aes(SYMPTOM))+geom_bar()+
labs(title='Distribution of each SYMPTOMs',x='SYMPTOM')+
theme(plot.title = element_text(hjust =0.5))+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
return(p)
}
G
setwd('D:\\wyr\\GR5243\\Fall2021-Project2-group5\\app')
library(shiny)
runApp()
runApp()
#===============================================Shiny UI=========================================================
ui <- fluidPage(
tags$style("@import url(https://use.fontawesome.com/releases/v5.7.2/css/all.css);"),
navbarPage(theme = shinytheme("readable"), collapsible = TRUE,
title= img(src="4newyorker_long.PNG", style="vertical-align= top", height = "180%", width="200"),
#HTML('<a style="text-decoration:none;cursor:default;" class="active" href="#">COVID-19 Survival Manual 4 New Yorkers</a>'),
id="nav",
windowTitle = "COVID-19 Survival Manual 4 New Yorkers",
header = tagList(
useShinydashboard()
),
# tab 1 (home page)
tabPanel('Home',icon = icon("home"),
fluidRow(
tags$img(src = nueva_york, class = "background", width="100%", style = "opacity: 0.70"),
absolutePanel(id = "foreground", class = "foreground-content",
top = "25%", left = "20%", right = "20%", width = "60%", fixed=FALSE,
draggable = FALSE, height = 200,
fluidRow(style = "padding: 7.5%; background-color: white; text-align: center",
tags$h1("Welcome to the COVID-19 Survival Manual 4 New Yorkers app!", style="font-weight:bold"),tags$br(),
tags$p("The Coronavirus (Covid-19) has so far infected over 100 million people and caused over 2 million deaths globally. In the US, the City of New York has been hit hardest, which many people lost their jobs or went bankrupt due to the devastating blow for the economy, and had restricted access to clean foods and medication. In this project, our goal is to provide a survival guide to help and support the suffering New Yorkers. ", style="font-weight:italic"),tags$br(),
tags$h3("Remember, we are in this together!", style="color:#18bc9c; font-weight:bold"),
tags$h4("We would like to be your source for Coronavirus updates, resources, and trends in New York City.", style="color:#18bc9c")
),
style = "opacity: 0.95")
)
),
# tab 2 (covid-19 tracker)
tabPanel('COVID-19 Tracker', icon = icon("viruses"),
div(class='coverDiv',
titlePanel("Latest Data on Coronavirus (COVID-19) Cases in New York City"),
span(tags$h5("This page provides up-to-date Covid-19 statistics in NYC including case count, death count, probable count and hospitalized count, as well as a time-series trends plot for a synthetic view.")),
fluidRow(
# Value Boxes for most recent day
column(3, align="center",offset = 1,
valueBoxOutput(outputId = "NewCasesBox",width = 12)
),
column(3, align="center",offset = 1,
valueBoxOutput(outputId = "NewProbBox",width = 12)
),
column(3, align="center",offset = 1,
valueBoxOutput(outputId = "NewDeathsBox",width = 12)
)
),
fluidRow(
# Value Boxes for cumulative result
column(3, align="center",offset = 1,
valueBoxOutput(outputId = "TCasesBox",width = 12)
),
column(3, align="center",offset = 1,
valueBoxOutput(outputId = "NewHospitalizedBox",width = 12)
),
column(3, align="center",offset = 1,
valueBoxOutput(outputId = "TDeathsBox",width = 12)
)
),
span(tags$i(h5("Source: ", tags$a(href="https://data.cityofnewyork.us/Health/COVID-19-Daily-Counts-of-Cases-Hospitalizations-an/rc75-m7u3", "Daily count of NYC Coronavirus Cases. ")," Reported cases are subject to significant variation in reporting organizations.", style="font-weight:italic"))),
tags$br(),
span(tags$i(h6(paste0("Last Update on: ", nyc_latest$date_of_interest[1])))),
# plot to compare 5 boroughs
span(tags$h2("Covid-19 Overall Situation of the 5 Boroughs in NYC")),
fluidRow(
column(4, align="center",
highchartOutput("tsnewcase",width = "100%",height = "400px")
),
column(4, align="center",
highchartOutput("tsnew",width = "100%",height = "400px")
),
column(4, align="center",
highchartOutput("tscum",width = "100%",height = "400px")
)
),
span(tags$h2("Covid-19 Detailed Situation  of the 5 Boroughs in NYC")),
sidebarLayout(position = "left",
sidebarPanel(
h3("NYC Neighborhoods", style="color:#068bd9"),
# select from drop-down lists
selectInput("select_borough",
label = NULL,
choices = borough_vars,
selected = borough_vars[1]),
# select from checkbox
h3("Select time series", align = "left", style="color:#068bd9"),
checkboxInput("daily", label = "Daily", value = TRUE),
checkboxInput("weekly", label = "Weekly", value = FALSE),tags$br(),
h3("Select the topic(s) to see trends over time", align = "left", style="color:#068bd9"),
checkboxInput("casesummary", label = "Cases", value = TRUE),
checkboxInput("deathsummary", label = "Deaths", value = FALSE),
checkboxInput("hospsummary", label = "Hospitalization", value = FALSE),tags$br(),
h4("Instructions for using the plot:", align = "left"),
h5("1. Select a NYC borough from the drop-down list;"),
h5("2. Select a time series;"),
h5("3. Select the topic(s) to plot trends;"),
h5("4. Move the mouse over lines to see specific points;"),
h5("5. Click on the legends to hide or show lines;"),
h5("6. Click on the plot and drag horizontally to select a date range;"),
h5("7. Click on the button in the top-right corner for more exporting options")
),
mainPanel(
highchartOutput("ts1",width = "100%",height = "560px")
)
)
)
),
# tab 3 (interactive map)
tabPanel("NYC Free Meal", icon = icon("map-marker-alt"),
leafletOutput("mymap", width="100%", height="100%"),
titlePanel("NYC FreeMeal Point"),
mainPanel(leafletOutput("map"))
),
# tab 4 (shelter)
tabPanel("Shelter", icon = icon("hotel"),
h2("The Shelter Data"),
DT::dataTableOutput("vaccine_table"),
h2("More information about shelter_offered type"),
uiOutput("tab"),
uiOutput("vac")
)
)
)
A
runApp()
runApp()
runApp()
runApp()
A
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(ggplot2)
cleanCols <- function(x){
lower_names = tolower(names(x))
sub_periods = gsub("\\.", "_", lower_names)
sub_spaces = gsub(" ","_",sub_periods)
clean_df_cols = gsub("__","_",sub_spaces)
return(clean_df_cols)
}
library(ggplot2)
library(dplyr)
cleanCols <- function(x){
lower_names = tolower(names(x))
sub_periods = gsub("\\.", "_", lower_names)
sub_spaces = gsub(" ","_",sub_periods)
clean_df_cols = gsub("__","_",sub_spaces)
return(clean_df_cols)
}
```
```{r}
dhs_data_dashboard = read.csv('../data/department_of_homeless_services/DHS_Data_Dashboard.csv')
dhs_daily_report = read.csv('../data/department_of_homeless_services/DHS_Daily_Report.csv')
buildings = read.csv('../data/department_of_homeless_services/Buildings_by_Borough_and_Community_District.csv')
individual_census = read.csv('../data/department_of_homeless_services/Individual_Census_by_Borough__Community_District__and_Facility_Type.csv')
free_covid_meals = read.csv('../data/department_of_homeless_services/COVID-19_Free_Meals_Locations.csv')
doh_offices = read.csv('../data/department_of_homeless_services/Directory_Of_Homebase_Locations.csv')
names(dhs_data_dashboard) = cleanCols(dhs_data_dashboard)
names(dhs_daily_report) = cleanCols(dhs_daily_report)
names(buildings) = cleanCols(buildings)
names(individual_census) = cleanCols(individual_census)
names(free_covid_meals) = cleanCols(free_covid_meals)
names(doh_offices) = cleanCols(doh_offices)
dhs_data_dashboard = mutate(dhs_data_dashboard, id = row_number())
pre_covid_data = dhs_data_dashboard[0:57,c('id','sa_avg_daily_census_individual_in_shelter_total','newdate')]
fit = lm(sa_avg_daily_census_individual_in_shelter_total ~ poly(id, degree=3),
data = pre_covid_data)
data = data.frame(id = seq(1,57,1))
data$fitted = fit$fitted.values
new_data = data.frame(id = seq(58,72,1))
new_data$fitted = predict(fit, newdata = new_data)
full_data = rbind(data,new_data)
full_data$sa_avg_daily_census_individual_in_shelter_total = dhs_data_dashboard$sa_avg_daily_census_individual_in_shelter_total
full_data$newdate = dhs_data_dashboard$newdate
ggplot(full_data,
aes(x = newdate,
y = sa_avg_daily_census_individual_in_shelter_total,
group = 1)) +
geom_line() +
geom_vline(xintercept = dhs_data_dashboard$id[57],
linetype="dotted",
color = "red",
size=.75) +
theme(axis.text.x = element_text(angle = 90)) +
geom_line(aes(y = fitted), size = 1)
library(ggplot2)
library(dplyr)
cleanCols <- function(x){
lower_names = tolower(names(x))
sub_periods = gsub("\\.", "_", lower_names)
sub_spaces = gsub(" ","_",sub_periods)
clean_df_cols = gsub("__","_",sub_spaces)
return(clean_df_cols)
}
dhs_data_dashboard = read.csv('../data/department_of_homeless_services/DHS_Data_Dashboard.csv')
dhs_daily_report = read.csv('../data/department_of_homeless_services/DHS_Daily_Report.csv')
buildings = read.csv('../data/department_of_homeless_services/Buildings_by_Borough_and_Community_District.csv')
individual_census = read.csv('../data/department_of_homeless_services/Individual_Census_by_Borough__Community_District__and_Facility_Type.csv')
free_covid_meals = read.csv('../data/department_of_homeless_services/COVID-19_Free_Meals_Locations.csv')
doh_offices = read.csv('../data/department_of_homeless_services/Directory_Of_Homebase_Locations.csv')
names(dhs_data_dashboard) = cleanCols(dhs_data_dashboard)
names(dhs_daily_report) = cleanCols(dhs_daily_report)
names(buildings) = cleanCols(buildings)
names(individual_census) = cleanCols(individual_census)
names(free_covid_meals) = cleanCols(free_covid_meals)
names(doh_offices) = cleanCols(doh_offices)
dhs_data_dashboard = mutate(dhs_data_dashboard, id = row_number())
pre_covid_data = dhs_data_dashboard[0:57,c('id','sa_avg_daily_census_individual_in_shelter_total','newdate')]
fit = lm(sa_avg_daily_census_individual_in_shelter_total ~ poly(id, degree=3),
data = pre_covid_data)
data = data.frame(id = seq(1,57,1))
data$fitted = fit$fitted.values
